{% assign class = include.class %}
{% assign parent = class | parent %}
{% if include.recursive %}
    {% for m in class.members %}
        {% if m.type == 'class' %}
            {% include generate_class with class = m and recursive = true %}
        {% elsif m.type == 'enum' %}
            {% include generate_enum with enum = m %}
        {% endif %}
    {% endfor %}
{% endif %}
{% assign has_wrappers_to_generate = false %}
{% for m in class.members %}
    {% if m.type == 'function' %}
        {% include needs_wrapper with function = m %}
        {% if function_needs_wrapper %}
            {% assign has_wrappers_to_generate = true %}
            {% break %}
        {% endif %}
    {% endif %}
{% endfor %}
{% if has_wrappers_to_generate %}
namespace 
{
{% for m in class.members %}
    {% if m.type == 'function' %}
        {% include needs_wrapper with function = m %}
        {% if function_needs_wrapper %}
            {% include generate_wrapper with function = m %}
        {% endif %}
    {% endif %}
{% endfor %}
}
{% endif %}

{% if parent and parent.type == 'class' %}
static void register_{{ class | qualified_name | replace: '::', '_' | snake_case }}(script::Class& parent)
{% else %}
static void register_{{ class | qualified_name | replace: '::', '_' | snake_case }}(script::Namespace& parent)
{% endif %}
{
  using namespace script;
  
{% if parent and parent.type == 'class' %}
{{'  '}}Class {{ class.name | snake_case }} = parent.newNestedClass("{{ class.name }}").setId(script::Type::make<{{ class | qualified_name }}>().data())
{% else %}
{{'  '}}Class {{ class.name | snake_case }} = parent.newClass("{{ class.name }}").setId(script::Type::make<{{ class | qualified_name }}>().data())
{% endif %}
{% if class.base %}
{{'    '}}.setBase(script::Type::make<{{ class.base }}>().data())
{% endif %}
{% if class.final %}
{{'    '}}.setFinal()
{% endif %}
{{'    '}}.get();

  Class& c = {{ class.name | snake_case }};
  
{% if include.recursive %}
    {% for m in class.members %}
        {% if m.type == 'class' %}
            {{'  '}}register_{{ m | qualified_name | replace: '::', '_' | snake_case }}(c);
        {% elsif m.type == 'enum' %}
            {{'  '}}register_{{ m | qualified_name | replace: '::', '_' | snake_case }}(c);
        {% endif %}
    {% endfor %}
{% endif %}
  
{% for m in class.members %}
    {% if m.type == 'function' %}
        {% include generate_function with function = m %}
    {% endif %}
{% endfor %}
}