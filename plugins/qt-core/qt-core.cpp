// Copyright (C) 2020 Vincent Chambrin
// This file is part of the 'gonk' project
// For conditions of distribution and use, see copyright notice in LICENSE

// Warning: This file was generated by metagonk, all modifications will be lost. //

#include "qt-core.h"

#include <script/engine.h>
#include <script/namespace.h>
#include <script/typesystem.h>

extern void register_bytearray_file(script::Namespace ns); // defined in bytearray.cpp
extern void register_string_file(script::Namespace ns); // defined in string.cpp
extern void register_char__file(script::Namespace ns); // defined in char_.cpp
extern void register_dir_file(script::Namespace ns); // defined in dir.cpp

namespace gonk
{

namespace qt_core
{

int class_type_id_offset_value = 0;
int enum_type_id_offset_value = 0;

int class_type_id_offset()
{
  return class_type_id_offset_value;
}

int enum_type_id_offset()
{
  return enum_type_id_offset_value;
}

} // namespace qt_core

} // namespace gonk

class QtCorePlugin : public gonk::Plugin
{
public:

  void load(script::Module m) override
  {
    script::Engine* e = m.engine();

    int nb_enum_types = static_cast<int>(gonk::qt_core::EnumTypeIds::LastTypeId) - static_cast<int>(gonk::qt_core::EnumTypeIds::FirstTypeId);
    int nb_class_types = static_cast<int>(gonk::qt_core::ClassTypeIds::LastTypeId) - static_cast<int>(gonk::qt_core::ClassTypeIds::FirstTypeId);

    gonk::qt_core::enum_type_id_offset_value = static_cast<int>(e->typeSystem()->reserve(script::Type::EnumFlag, nb_enum_types));
    gonk::qt_core::class_type_id_offset_value = static_cast<int>(e->typeSystem()->reserve(script::Type::ObjectFlag, nb_class_types));

    script::Namespace ns = m.root();

    register_bytearray_file(ns);
    register_string_file(ns);
    register_char__file(ns);
    register_dir_file(ns);
  }

  void unload(script::Module m) override
  {

  }
};

gonk::Plugin* gonk_qt_core_module()
{
  return new QtCorePlugin();
}
