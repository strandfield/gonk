// Copyright (C) 2020 Vincent Chambrin
// This file is part of the 'gonk' project
// For conditions of distribution and use, see copyright notice in LICENSE

// Warning: This file was generated by metagonk, all modifications will be lost. //

#include "string.h"

#include "gonk/common/binding/class.h"
#include "gonk/common/binding/namespace.h"
#include "gonk/common/enums.h"

#include <script/classbuilder.h>
#include <script/enumbuilder.h>

#include "qt-core/bytearray.h"
#include "qt-core/char_.h"
#include "qt-core/string.h"

static void register_latin1_string_class(script::Namespace ns)
{
  using namespace script;

  Class latin1_string = ns.newClass("QLatin1String").setId(script::Type::make<QLatin1String>().data()).get();


  // QLatin1String();
  gonk::bind::default_constructor<QLatin1String>(latin1_string).create();
  // QLatin1String(const char*);
  /// TODO: QLatin1String(const char*);
  // QLatin1String(const char*, const char*);
  /// TODO: QLatin1String(const char*, const char*);
  // QLatin1String(const char*, int);
  /// TODO: QLatin1String(const char*, int);
  // QLatin1String(const QByteArray&);
  gonk::bind::constructor<QLatin1String, const QByteArray&>(latin1_string).create();
  // const char* latin1() const;
  /// TODO: const char* latin1() const;
  // int size() const;
  gonk::bind::member_function<QLatin1String, int, &QLatin1String::size>(latin1_string, "size").create();
  // const char* data() const;
  /// TODO: const char* data() const;
  // bool isNull() const;
  gonk::bind::member_function<QLatin1String, bool, &QLatin1String::isNull>(latin1_string, "isNull").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QLatin1String, bool, &QLatin1String::isEmpty>(latin1_string, "isEmpty").create();
  // QLatin1Char at(int) const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, int, &QLatin1String::at>(latin1_string, "at").create();
  // QLatin1Char operator[](int) const;
  gonk::bind::memop_const_subscript<QLatin1String, QLatin1Char, int>(latin1_string);
  // QLatin1Char front() const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, &QLatin1String::front>(latin1_string, "front").create();
  // QLatin1Char back() const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, &QLatin1String::back>(latin1_string, "back").create();
  // bool startsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QStringView, Qt::CaseSensitivity) const;
  // bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool startsWith(QChar) const;
  gonk::bind::member_function<QLatin1String, bool, QChar, &QLatin1String::startsWith>(latin1_string, "startsWith").create();
  // bool startsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QChar, Qt::CaseSensitivity) const;
  // bool endsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QStringView, Qt::CaseSensitivity) const;
  // bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool endsWith(QChar) const;
  gonk::bind::member_function<QLatin1String, bool, QChar, &QLatin1String::endsWith>(latin1_string, "endsWith").create();
  // bool endsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QChar, Qt::CaseSensitivity) const;
  // QLatin1String::const_iterator begin() const;
  /// TODO: QLatin1String::const_iterator begin() const;
  // QLatin1String::const_iterator cbegin() const;
  /// TODO: QLatin1String::const_iterator cbegin() const;
  // QLatin1String::const_iterator end() const;
  /// TODO: QLatin1String::const_iterator end() const;
  // QLatin1String::const_iterator cend() const;
  /// TODO: QLatin1String::const_iterator cend() const;
  // QLatin1String::const_reverse_iterator rbegin() const;
  /// TODO: QLatin1String::const_reverse_iterator rbegin() const;
  // QLatin1String::const_reverse_iterator crbegin() const;
  /// TODO: QLatin1String::const_reverse_iterator crbegin() const;
  // QLatin1String::const_reverse_iterator rend() const;
  /// TODO: QLatin1String::const_reverse_iterator rend() const;
  // QLatin1String::const_reverse_iterator crend() const;
  /// TODO: QLatin1String::const_reverse_iterator crend() const;
  // QLatin1String mid(int) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::mid>(latin1_string, "mid").create();
  // QLatin1String mid(int, int) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, int, &QLatin1String::mid>(latin1_string, "mid").create();
  // QLatin1String left(int) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::left>(latin1_string, "left").create();
  // QLatin1String right(int) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::right>(latin1_string, "right").create();
  // QLatin1String chopped(int) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::chopped>(latin1_string, "chopped").create();
  // void chop(int);
  gonk::bind::void_member_function<QLatin1String, int, &QLatin1String::chop>(latin1_string, "chop").create();
  // void truncate(int);
  gonk::bind::void_member_function<QLatin1String, int, &QLatin1String::truncate>(latin1_string, "truncate").create();
  // QLatin1String trimmed() const;
  gonk::bind::member_function<QLatin1String, QLatin1String, &QLatin1String::trimmed>(latin1_string, "trimmed").create();
  // bool operator==(const QString&) const;
  gonk::bind::memop_eq<QLatin1String, const QString&>(latin1_string);
  // bool operator!=(const QString&) const;
  gonk::bind::memop_neq<QLatin1String, const QString&>(latin1_string);
  // bool operator>(const QString&) const;
  gonk::bind::memop_greater<QLatin1String, const QString&>(latin1_string);
  // bool operator<(const QString&) const;
  gonk::bind::memop_less<QLatin1String, const QString&>(latin1_string);
  // bool operator>=(const QString&) const;
  gonk::bind::memop_geq<QLatin1String, const QString&>(latin1_string);
  // bool operator<=(const QString&) const;
  gonk::bind::memop_leq<QLatin1String, const QString&>(latin1_string);
  // bool operator==(const char*) const;
  /// TODO: bool operator==(const char*) const;
  // bool operator!=(const char*) const;
  /// TODO: bool operator!=(const char*) const;
  // bool operator<(const char*) const;
  /// TODO: bool operator<(const char*) const;
  // bool operator>(const char*) const;
  /// TODO: bool operator>(const char*) const;
  // bool operator<=(const char*) const;
  /// TODO: bool operator<=(const char*) const;
  // bool operator>=(const char*) const;
  /// TODO: bool operator>=(const char*) const;
  // bool operator==(const QByteArray&) const;
  gonk::bind::memop_eq<QLatin1String, const QByteArray&>(latin1_string);
  // bool operator!=(const QByteArray&) const;
  gonk::bind::memop_neq<QLatin1String, const QByteArray&>(latin1_string);
  // bool operator<(const QByteArray&) const;
  gonk::bind::memop_less<QLatin1String, const QByteArray&>(latin1_string);
  // bool operator>(const QByteArray&) const;
  gonk::bind::memop_greater<QLatin1String, const QByteArray&>(latin1_string);
  // bool operator<=(const QByteArray&) const;
  gonk::bind::memop_leq<QLatin1String, const QByteArray&>(latin1_string);
  // bool operator>=(const QByteArray&) const;
  gonk::bind::memop_geq<QLatin1String, const QByteArray&>(latin1_string);
}


static void register_string_section_flag_enum(script::Class string)
{
  using namespace script;

  Enum section_flag = string.newEnum("SectionFlag").setId(script::Type::make<QString::SectionFlag>().data()).get();

  section_flag.addValue("SectionDefault", QString::SectionDefault);
  section_flag.addValue("SectionSkipEmpty", QString::SectionSkipEmpty);
  section_flag.addValue("SectionIncludeLeadingSep", QString::SectionIncludeLeadingSep);
  section_flag.addValue("SectionIncludeTrailingSep", QString::SectionIncludeTrailingSep);
  section_flag.addValue("SectionCaseInsensitiveSeps", QString::SectionCaseInsensitiveSeps);
}


static void register_string_split_behavior_enum(script::Class string)
{
  using namespace script;

  Enum split_behavior = string.newEnum("SplitBehavior").setId(script::Type::make<QString::SplitBehavior>().data()).get();

  split_behavior.addValue("KeepEmptyParts", QString::KeepEmptyParts);
  split_behavior.addValue("SkipEmptyParts", QString::SkipEmptyParts);
}


static void register_string_normalization_form_enum(script::Class string)
{
  using namespace script;

  Enum normalization_form = string.newEnum("NormalizationForm").setId(script::Type::make<QString::NormalizationForm>().data()).get();

  normalization_form.addValue("NormalizationForm_D", QString::NormalizationForm_D);
  normalization_form.addValue("NormalizationForm_C", QString::NormalizationForm_C);
  normalization_form.addValue("NormalizationForm_KD", QString::NormalizationForm_KD);
  normalization_form.addValue("NormalizationForm_KC", QString::NormalizationForm_KC);
}


static void register_string_null_class(script::Class string)
{
  using namespace script;

  Class null = string.newNestedClass("QString::Null").setId(script::Type::make<QString::Null>().data()).get();


}


namespace {
QString string_toLower(const QString& self)
{
  return self.toLower();
}

QString string_toUpper(const QString& self)
{
  return self.toUpper();
}

QString string_toCaseFolded(const QString& self)
{
  return self.toCaseFolded();
}

QString string_trimmed(const QString& self)
{
  return self.trimmed();
}

QString string_simplified(const QString& self)
{
  return self.simplified();
}

QByteArray string_toLatin1(const QString& self)
{
  return self.toLatin1();
}

QByteArray string_toUtf8(const QString& self)
{
  return self.toUtf8();
}

QByteArray string_toLocal8Bit(const QString& self)
{
  return self.toLocal8Bit();
}

}

static void register_string_class(script::Namespace ns)
{
  using namespace script;

  Class string = ns.newClass("QString").setId(script::Type::make<QString>().data()).get();

  register_string_section_flag_enum(string);
  register_string_split_behavior_enum(string);
  register_string_normalization_form_enum(string);
  register_string_null_class(string);

  // QString();
  gonk::bind::default_constructor<QString>(string).create();
  // QString(const QChar*, int);
  /// TODO: QString(const QChar*, int);
  // QString(QChar);
  gonk::bind::constructor<QString, QChar>(string).create();
  // QString(int, QChar);
  gonk::bind::constructor<QString, int, QChar>(string).create();
  // QString(QLatin1String);
  gonk::bind::constructor<QString, QLatin1String>(string).create();
  // QString(const QString&);
  gonk::bind::constructor<QString, const QString&>(string).create();
  // ~QString();
  gonk::bind::destructor<QString>(string).create();
  // QString& operator=(QChar);
  gonk::bind::memop_assign<QString, QChar>(string);
  // QString& operator=(const QString&);
  gonk::bind::memop_assign<QString, const QString&>(string);
  // QString& operator=(QLatin1String);
  gonk::bind::memop_assign<QString, QLatin1String>(string);
  // QString(QString&&);
  gonk::bind::constructor<QString, QString&&>(string).create();
  // QString& operator=(QString&&);
  gonk::bind::memop_assign<QString, QString&&>(string);
  // void swap(QString&);
  gonk::bind::void_member_function<QString, QString&, &QString::swap>(string, "swap").create();
  // int size() const;
  gonk::bind::member_function<QString, int, &QString::size>(string, "size").create();
  // int count() const;
  gonk::bind::member_function<QString, int, &QString::count>(string, "count").create();
  // int length() const;
  gonk::bind::member_function<QString, int, &QString::length>(string, "length").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QString, bool, &QString::isEmpty>(string, "isEmpty").create();
  // void resize(int);
  gonk::bind::void_member_function<QString, int, &QString::resize>(string, "resize").create();
  // void resize(int, QChar);
  gonk::bind::void_member_function<QString, int, QChar, &QString::resize>(string, "resize").create();
  // QString& fill(QChar, int);
  gonk::bind::member_function<QString, QString&, QChar, int, &QString::fill>(string, "fill").create();
  // void truncate(int);
  gonk::bind::void_member_function<QString, int, &QString::truncate>(string, "truncate").create();
  // void chop(int);
  gonk::bind::void_member_function<QString, int, &QString::chop>(string, "chop").create();
  // int capacity() const;
  gonk::bind::member_function<QString, int, &QString::capacity>(string, "capacity").create();
  // void reserve(int);
  gonk::bind::void_member_function<QString, int, &QString::reserve>(string, "reserve").create();
  // void squeeze();
  gonk::bind::void_member_function<QString, &QString::squeeze>(string, "squeeze").create();
  // const QChar* unicode() const;
  /// TODO: const QChar* unicode() const;
  // QChar* data();
  /// TODO: QChar* data();
  // const QChar* data() const;
  /// TODO: const QChar* data() const;
  // const QChar* constData() const;
  /// TODO: const QChar* constData() const;
  // void detach();
  gonk::bind::void_member_function<QString, &QString::detach>(string, "detach").create();
  // bool isDetached() const;
  gonk::bind::member_function<QString, bool, &QString::isDetached>(string, "isDetached").create();
  // bool isSharedWith(const QString&) const;
  gonk::bind::member_function<QString, bool, const QString&, &QString::isSharedWith>(string, "isSharedWith").create();
  // void clear();
  gonk::bind::void_member_function<QString, &QString::clear>(string, "clear").create();
  // const QChar at(int) const;
  gonk::bind::member_function<QString, const QChar, int, &QString::at>(string, "at").create();
  // const QChar operator[](int) const;
  gonk::bind::memop_const_subscript<QString, const QChar, int>(string);
  // QCharRef operator[](int);
  gonk::bind::memop_subscript<QString, QCharRef, int>(string);
  // const QChar operator[](uint) const;
  /// TODO: const QChar operator[](uint) const;
  // QCharRef operator[](uint);
  /// TODO: QCharRef operator[](uint);
  // QChar front() const;
  gonk::bind::member_function<QString, QChar, &QString::front>(string, "front").create();
  // QCharRef front();
  gonk::bind::member_function<QString, QCharRef, &QString::front>(string, "front").create();
  // QChar back() const;
  gonk::bind::member_function<QString, QChar, &QString::back>(string, "back").create();
  // QCharRef back();
  gonk::bind::member_function<QString, QCharRef, &QString::back>(string, "back").create();
  // QString arg(qlonglong, int, int, QChar) const;
  /// TODO: QString arg(qlonglong, int, int, QChar) const;
  // QString arg(qulonglong, int, int, QChar) const;
  /// TODO: QString arg(qulonglong, int, int, QChar) const;
  // QString arg(long, int, int, QChar) const;
  /// TODO: QString arg(long, int, int, QChar) const;
  // QString arg(ulong, int, int, QChar) const;
  /// TODO: QString arg(ulong, int, int, QChar) const;
  // QString arg(int, int, int, QChar) const;
  gonk::bind::member_function<QString, QString, int, int, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(uint, int, int, QChar) const;
  /// TODO: QString arg(uint, int, int, QChar) const;
  // QString arg(short, int, int, QChar) const;
  /// TODO: QString arg(short, int, int, QChar) const;
  // QString arg(ushort, int, int, QChar) const;
  /// TODO: QString arg(ushort, int, int, QChar) const;
  // QString arg(double, int, char, int, QChar) const;
  gonk::bind::member_function<QString, QString, double, int, char, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(char, int, QChar) const;
  gonk::bind::member_function<QString, QString, char, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(QChar, int, QChar) const;
  gonk::bind::member_function<QString, QString, QChar, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, int, QChar) const;
  gonk::bind::member_function<QString, QString, const QString&, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(QStringView, int, QChar) const;
  /// TODO: QString arg(QStringView, int, QChar) const;
  // QString arg(QLatin1String, int, QChar) const;
  gonk::bind::member_function<QString, QString, QLatin1String, int, QChar, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&, const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&, const QString&, const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&, const QString&, const QString&, const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString arg(const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(string, "arg").create();
  // QString& vsprintf(const char*, va_list);
  /// TODO: QString& vsprintf(const char*, va_list);
  // QString& sprintf(const char*);
  /// TODO: QString& sprintf(const char*);
  // static QString vasprintf(const char*, va_list);
  /// TODO: static QString vasprintf(const char*, va_list);
  // static QString asprintf(const char*);
  /// TODO: static QString asprintf(const char*);
  // int indexOf(QChar, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(QChar, int, Qt::CaseSensitivity) const;
  // int indexOf(const QString&, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(const QString&, int, Qt::CaseSensitivity) const;
  // int indexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  // int indexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(QChar, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(QChar, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(const QString&, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(const QString&, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  // bool contains(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool contains(QChar, Qt::CaseSensitivity) const;
  // bool contains(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool contains(const QString&, Qt::CaseSensitivity) const;
  // bool contains(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool contains(QLatin1String, Qt::CaseSensitivity) const;
  // bool contains(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool contains(const QStringRef&, Qt::CaseSensitivity) const;
  // int count(QChar, Qt::CaseSensitivity) const;
  /// TODO: int count(QChar, Qt::CaseSensitivity) const;
  // int count(const QString&, Qt::CaseSensitivity) const;
  /// TODO: int count(const QString&, Qt::CaseSensitivity) const;
  // int count(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: int count(const QStringRef&, Qt::CaseSensitivity) const;
  // int indexOf(const QRegExp&, int) const;
  /// TODO: int indexOf(const QRegExp&, int) const;
  // int lastIndexOf(const QRegExp&, int) const;
  /// TODO: int lastIndexOf(const QRegExp&, int) const;
  // bool contains(const QRegExp&) const;
  /// TODO: bool contains(const QRegExp&) const;
  // int count(const QRegExp&) const;
  /// TODO: int count(const QRegExp&) const;
  // int indexOf(QRegExp&, int) const;
  /// TODO: int indexOf(QRegExp&, int) const;
  // int lastIndexOf(QRegExp&, int) const;
  /// TODO: int lastIndexOf(QRegExp&, int) const;
  // bool contains(QRegExp&) const;
  /// TODO: bool contains(QRegExp&) const;
  // int indexOf(const QRegularExpression&, int) const;
  /// TODO: int indexOf(const QRegularExpression&, int) const;
  // int indexOf(const QRegularExpression&, int, QRegularExpressionMatch*) const;
  /// TODO: int indexOf(const QRegularExpression&, int, QRegularExpressionMatch*) const;
  // int lastIndexOf(const QRegularExpression&, int) const;
  /// TODO: int lastIndexOf(const QRegularExpression&, int) const;
  // int lastIndexOf(const QRegularExpression&, int, QRegularExpressionMatch*) const;
  /// TODO: int lastIndexOf(const QRegularExpression&, int, QRegularExpressionMatch*) const;
  // bool contains(const QRegularExpression&) const;
  /// TODO: bool contains(const QRegularExpression&) const;
  // bool contains(const QRegularExpression&, QRegularExpressionMatch*) const;
  /// TODO: bool contains(const QRegularExpression&, QRegularExpressionMatch*) const;
  // int count(const QRegularExpression&) const;
  /// TODO: int count(const QRegularExpression&) const;
  // QString section(QChar, int, int, QString::SectionFlags) const;
  /// TODO: QString section(QChar, int, int, QString::SectionFlags) const;
  // QString section(const QString&, int, int, QString::SectionFlags) const;
  /// TODO: QString section(const QString&, int, int, QString::SectionFlags) const;
  // QString section(const QRegExp&, int, int, QString::SectionFlags) const;
  /// TODO: QString section(const QRegExp&, int, int, QString::SectionFlags) const;
  // QString section(const QRegularExpression&, int, int, QString::SectionFlags) const;
  /// TODO: QString section(const QRegularExpression&, int, int, QString::SectionFlags) const;
  // QString left(int) const;
  gonk::bind::member_function<QString, QString, int, &QString::left>(string, "left").create();
  // QString right(int) const;
  gonk::bind::member_function<QString, QString, int, &QString::right>(string, "right").create();
  // QString mid(int, int) const;
  gonk::bind::member_function<QString, QString, int, int, &QString::mid>(string, "mid").create();
  // QString chopped(int) const;
  gonk::bind::member_function<QString, QString, int, &QString::chopped>(string, "chopped").create();
  // QStringRef leftRef(int) const;
  gonk::bind::member_function<QString, QStringRef, int, &QString::leftRef>(string, "leftRef").create();
  // QStringRef rightRef(int) const;
  gonk::bind::member_function<QString, QStringRef, int, &QString::rightRef>(string, "rightRef").create();
  // QStringRef midRef(int, int) const;
  gonk::bind::member_function<QString, QStringRef, int, int, &QString::midRef>(string, "midRef").create();
  // bool startsWith(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(const QString&, Qt::CaseSensitivity) const;
  // bool startsWith(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(const QStringRef&, Qt::CaseSensitivity) const;
  // bool startsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QStringView, Qt::CaseSensitivity) const;
  // bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool startsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QChar, Qt::CaseSensitivity) const;
  // bool endsWith(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(const QString&, Qt::CaseSensitivity) const;
  // bool endsWith(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(const QStringRef&, Qt::CaseSensitivity) const;
  // bool endsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QStringView, Qt::CaseSensitivity) const;
  // bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool endsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QChar, Qt::CaseSensitivity) const;
  // QString leftJustified(int, QChar, bool) const;
  gonk::bind::member_function<QString, QString, int, QChar, bool, &QString::leftJustified>(string, "leftJustified").create();
  // QString rightJustified(int, QChar, bool) const;
  gonk::bind::member_function<QString, QString, int, QChar, bool, &QString::rightJustified>(string, "rightJustified").create();
  // QString toLower() const;
  gonk::bind::fn_as_memfn<QString, QString, &string_toLower>(string, "toLower").create();
  // QString toUpper() const;
  gonk::bind::fn_as_memfn<QString, QString, &string_toUpper>(string, "toUpper").create();
  // QString toCaseFolded() const;
  gonk::bind::fn_as_memfn<QString, QString, &string_toCaseFolded>(string, "toCaseFolded").create();
  // QString trimmed() const;
  gonk::bind::fn_as_memfn<QString, QString, &string_trimmed>(string, "trimmed").create();
  // QString simplified() const;
  gonk::bind::fn_as_memfn<QString, QString, &string_simplified>(string, "simplified").create();
  // QString toHtmlEscaped() const;
  gonk::bind::member_function<QString, QString, &QString::toHtmlEscaped>(string, "toHtmlEscaped").create();
  // QString& insert(int, QChar);
  gonk::bind::member_function<QString, QString&, int, QChar, &QString::insert>(string, "insert").create();
  // QString& insert(int, const QChar*, int);
  /// TODO: QString& insert(int, const QChar*, int);
  // QString& insert(int, const QString&);
  gonk::bind::member_function<QString, QString&, int, const QString&, &QString::insert>(string, "insert").create();
  // QString& insert(int, const QStringRef&);
  gonk::bind::member_function<QString, QString&, int, const QStringRef&, &QString::insert>(string, "insert").create();
  // QString& insert(int, QLatin1String);
  gonk::bind::member_function<QString, QString&, int, QLatin1String, &QString::insert>(string, "insert").create();
  // QString& append(QChar);
  gonk::bind::member_function<QString, QString&, QChar, &QString::append>(string, "append").create();
  // QString& append(const QChar*, int);
  /// TODO: QString& append(const QChar*, int);
  // QString& append(const QString&);
  gonk::bind::member_function<QString, QString&, const QString&, &QString::append>(string, "append").create();
  // QString& append(const QStringRef&);
  gonk::bind::member_function<QString, QString&, const QStringRef&, &QString::append>(string, "append").create();
  // QString& append(QLatin1String);
  gonk::bind::member_function<QString, QString&, QLatin1String, &QString::append>(string, "append").create();
  // QString& prepend(QChar);
  gonk::bind::member_function<QString, QString&, QChar, &QString::prepend>(string, "prepend").create();
  // QString& prepend(const QChar*, int);
  /// TODO: QString& prepend(const QChar*, int);
  // QString& prepend(const QString&);
  gonk::bind::member_function<QString, QString&, const QString&, &QString::prepend>(string, "prepend").create();
  // QString& prepend(const QStringRef&);
  gonk::bind::member_function<QString, QString&, const QStringRef&, &QString::prepend>(string, "prepend").create();
  // QString& prepend(QLatin1String);
  gonk::bind::member_function<QString, QString&, QLatin1String, &QString::prepend>(string, "prepend").create();
  // QString& operator+=(QChar);
  gonk::bind::memop_add_assign<QString, QChar>(string);
  // QString& operator+=(QChar::SpecialCharacter);
  gonk::bind::memop_add_assign<QString, QChar::SpecialCharacter>(string);
  // QString& operator+=(const QString&);
  gonk::bind::memop_add_assign<QString, const QString&>(string);
  // QString& operator+=(const QStringRef&);
  gonk::bind::memop_add_assign<QString, const QStringRef&>(string);
  // QString& operator+=(QLatin1String);
  gonk::bind::memop_add_assign<QString, QLatin1String>(string);
  // QString& remove(int, int);
  gonk::bind::member_function<QString, QString&, int, int, &QString::remove>(string, "remove").create();
  // QString& remove(QChar, Qt::CaseSensitivity);
  /// TODO: QString& remove(QChar, Qt::CaseSensitivity);
  // QString& remove(const QString&, Qt::CaseSensitivity);
  /// TODO: QString& remove(const QString&, Qt::CaseSensitivity);
  // QString& replace(int, int, QChar);
  gonk::bind::member_function<QString, QString&, int, int, QChar, &QString::replace>(string, "replace").create();
  // QString& replace(int, int, const QChar*, int);
  /// TODO: QString& replace(int, int, const QChar*, int);
  // QString& replace(int, int, const QString&);
  gonk::bind::member_function<QString, QString&, int, int, const QString&, &QString::replace>(string, "replace").create();
  // QString& replace(QChar, QChar, Qt::CaseSensitivity);
  /// TODO: QString& replace(QChar, QChar, Qt::CaseSensitivity);
  // QString& replace(const QChar*, int, const QChar*, int, Qt::CaseSensitivity);
  /// TODO: QString& replace(const QChar*, int, const QChar*, int, Qt::CaseSensitivity);
  // QString& replace(QLatin1String, QLatin1String, Qt::CaseSensitivity);
  /// TODO: QString& replace(QLatin1String, QLatin1String, Qt::CaseSensitivity);
  // QString& replace(QLatin1String, const QString&, Qt::CaseSensitivity);
  /// TODO: QString& replace(QLatin1String, const QString&, Qt::CaseSensitivity);
  // QString& replace(const QString&, QLatin1String, Qt::CaseSensitivity);
  /// TODO: QString& replace(const QString&, QLatin1String, Qt::CaseSensitivity);
  // QString& replace(const QString&, const QString&, Qt::CaseSensitivity);
  /// TODO: QString& replace(const QString&, const QString&, Qt::CaseSensitivity);
  // QString& replace(QChar, const QString&, Qt::CaseSensitivity);
  /// TODO: QString& replace(QChar, const QString&, Qt::CaseSensitivity);
  // QString& replace(QChar, QLatin1String, Qt::CaseSensitivity);
  /// TODO: QString& replace(QChar, QLatin1String, Qt::CaseSensitivity);
  // QString& replace(const QRegExp&, const QString&);
  /// TODO: QString& replace(const QRegExp&, const QString&);
  // QString& remove(const QRegExp&);
  /// TODO: QString& remove(const QRegExp&);
  // QString& replace(const QRegularExpression&, const QString&);
  /// TODO: QString& replace(const QRegularExpression&, const QString&);
  // QString& remove(const QRegularExpression&);
  /// TODO: QString& remove(const QRegularExpression&);
  // QStringList split(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QStringList split(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QVector<QStringRef> splitRef(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QVector<QStringRef> splitRef(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QStringList split(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QStringList split(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QVector<QStringRef> splitRef(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QVector<QStringRef> splitRef(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QStringList split(const QRegExp&, QString::SplitBehavior) const;
  /// TODO: QStringList split(const QRegExp&, QString::SplitBehavior) const;
  // QVector<QStringRef> splitRef(const QRegExp&, QString::SplitBehavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegExp&, QString::SplitBehavior) const;
  // QStringList split(const QRegularExpression&, QString::SplitBehavior) const;
  /// TODO: QStringList split(const QRegularExpression&, QString::SplitBehavior) const;
  // QVector<QStringRef> splitRef(const QRegularExpression&, QString::SplitBehavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegularExpression&, QString::SplitBehavior) const;
  // QString normalized(QString::NormalizationForm, QChar::UnicodeVersion) const;
  gonk::bind::member_function<QString, QString, QString::NormalizationForm, QChar::UnicodeVersion, &QString::normalized>(string, "normalized").create();
  // QString repeated(int) const;
  gonk::bind::member_function<QString, QString, int, &QString::repeated>(string, "repeated").create();
  // const ushort* utf16() const;
  /// TODO: const ushort* utf16() const;
  // QByteArray toLatin1() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &string_toLatin1>(string, "toLatin1").create();
  // QByteArray toUtf8() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &string_toUtf8>(string, "toUtf8").create();
  // QByteArray toLocal8Bit() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &string_toLocal8Bit>(string, "toLocal8Bit").create();
  // QVector<uint> toUcs4() const;
  /// TODO: QVector<uint> toUcs4() const;
  // static QString fromLatin1(const char*, int);
  /// TODO: static QString fromLatin1(const char*, int);
  // static QString fromUtf8(const char*, int);
  /// TODO: static QString fromUtf8(const char*, int);
  // static QString fromLocal8Bit(const char*, int);
  /// TODO: static QString fromLocal8Bit(const char*, int);
  // static QString fromLatin1(const QByteArray&);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromLatin1>(string, "fromLatin1").create();
  // static QString fromUtf8(const QByteArray&);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromUtf8>(string, "fromUtf8").create();
  // static QString fromLocal8Bit(const QByteArray&);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromLocal8Bit>(string, "fromLocal8Bit").create();
  // static QString fromUtf16(const ushort*, int);
  /// TODO: static QString fromUtf16(const ushort*, int);
  // static QString fromUcs4(const uint*, int);
  /// TODO: static QString fromUcs4(const uint*, int);
  // static QString fromRawData(const QChar*, int);
  /// TODO: static QString fromRawData(const QChar*, int);
  // static QString fromUtf16(const char16_t*, int);
  /// TODO: static QString fromUtf16(const char16_t*, int);
  // static QString fromUcs4(const char32_t*, int);
  /// TODO: static QString fromUcs4(const char32_t*, int);
  // int toWCharArray(wchar_t*) const;
  /// TODO: int toWCharArray(wchar_t*) const;
  // static QString fromWCharArray(const wchar_t*, int);
  /// TODO: static QString fromWCharArray(const wchar_t*, int);
  // QString& setRawData(const QChar*, int);
  /// TODO: QString& setRawData(const QChar*, int);
  // QString& setUnicode(const QChar*, int);
  /// TODO: QString& setUnicode(const QChar*, int);
  // QString& setUtf16(const ushort*, int);
  /// TODO: QString& setUtf16(const ushort*, int);
  // int compare(const QString&, Qt::CaseSensitivity) const;
  /// TODO: int compare(const QString&, Qt::CaseSensitivity) const;
  // int compare(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: int compare(QLatin1String, Qt::CaseSensitivity) const;
  // static int compare(const QString&, const QString&, Qt::CaseSensitivity);
  /// TODO: static int compare(const QString&, const QString&, Qt::CaseSensitivity);
  // static int compare(const QString&, QLatin1String, Qt::CaseSensitivity);
  /// TODO: static int compare(const QString&, QLatin1String, Qt::CaseSensitivity);
  // static int compare(QLatin1String, const QString&, Qt::CaseSensitivity);
  /// TODO: static int compare(QLatin1String, const QString&, Qt::CaseSensitivity);
  // int compare(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: int compare(const QStringRef&, Qt::CaseSensitivity) const;
  // static int compare(const QString&, const QStringRef&, Qt::CaseSensitivity);
  /// TODO: static int compare(const QString&, const QStringRef&, Qt::CaseSensitivity);
  // int localeAwareCompare(const QString&) const;
  gonk::bind::member_function<QString, int, const QString&, &QString::localeAwareCompare>(string, "localeAwareCompare").create();
  // static int localeAwareCompare(const QString&, const QString&);
  gonk::bind::static_member_function<QString, int, const QString&, const QString&, &QString::localeAwareCompare>(string, "localeAwareCompare").create();
  // int localeAwareCompare(const QStringRef&) const;
  gonk::bind::member_function<QString, int, const QStringRef&, &QString::localeAwareCompare>(string, "localeAwareCompare").create();
  // static int localeAwareCompare(const QString&, const QStringRef&);
  gonk::bind::static_member_function<QString, int, const QString&, const QStringRef&, &QString::localeAwareCompare>(string, "localeAwareCompare").create();
  // short toShort(bool*, int) const;
  /// TODO: short toShort(bool*, int) const;
  // ushort toUShort(bool*, int) const;
  /// TODO: ushort toUShort(bool*, int) const;
  // int toInt(bool*, int) const;
  /// TODO: int toInt(bool*, int) const;
  // uint toUInt(bool*, int) const;
  /// TODO: uint toUInt(bool*, int) const;
  // long toLong(bool*, int) const;
  /// TODO: long toLong(bool*, int) const;
  // ulong toULong(bool*, int) const;
  /// TODO: ulong toULong(bool*, int) const;
  // qlonglong toLongLong(bool*, int) const;
  /// TODO: qlonglong toLongLong(bool*, int) const;
  // qulonglong toULongLong(bool*, int) const;
  /// TODO: qulonglong toULongLong(bool*, int) const;
  // float toFloat(bool*) const;
  /// TODO: float toFloat(bool*) const;
  // double toDouble(bool*) const;
  /// TODO: double toDouble(bool*) const;
  // QString& setNum(short, int);
  /// TODO: QString& setNum(short, int);
  // QString& setNum(ushort, int);
  /// TODO: QString& setNum(ushort, int);
  // QString& setNum(int, int);
  gonk::bind::member_function<QString, QString&, int, int, &QString::setNum>(string, "setNum").create();
  // QString& setNum(uint, int);
  /// TODO: QString& setNum(uint, int);
  // QString& setNum(long, int);
  /// TODO: QString& setNum(long, int);
  // QString& setNum(ulong, int);
  /// TODO: QString& setNum(ulong, int);
  // QString& setNum(qlonglong, int);
  /// TODO: QString& setNum(qlonglong, int);
  // QString& setNum(qulonglong, int);
  /// TODO: QString& setNum(qulonglong, int);
  // QString& setNum(float, char, int);
  gonk::bind::member_function<QString, QString&, float, char, int, &QString::setNum>(string, "setNum").create();
  // QString& setNum(double, char, int);
  gonk::bind::member_function<QString, QString&, double, char, int, &QString::setNum>(string, "setNum").create();
  // static QString number(int, int);
  gonk::bind::static_member_function<QString, QString, int, int, &QString::number>(string, "number").create();
  // static QString number(uint, int);
  /// TODO: static QString number(uint, int);
  // static QString number(long, int);
  /// TODO: static QString number(long, int);
  // static QString number(ulong, int);
  /// TODO: static QString number(ulong, int);
  // static QString number(qlonglong, int);
  /// TODO: static QString number(qlonglong, int);
  // static QString number(qulonglong, int);
  /// TODO: static QString number(qulonglong, int);
  // static QString number(double, char, int);
  gonk::bind::static_member_function<QString, QString, double, char, int, &QString::number>(string, "number").create();
  // bool operator==(QLatin1String) const;
  gonk::bind::memop_eq<QString, QLatin1String>(string);
  // bool operator<(QLatin1String) const;
  gonk::bind::memop_less<QString, QLatin1String>(string);
  // bool operator>(QLatin1String) const;
  gonk::bind::memop_greater<QString, QLatin1String>(string);
  // bool operator!=(QLatin1String) const;
  gonk::bind::memop_neq<QString, QLatin1String>(string);
  // bool operator<=(QLatin1String) const;
  gonk::bind::memop_leq<QString, QLatin1String>(string);
  // bool operator>=(QLatin1String) const;
  gonk::bind::memop_geq<QString, QLatin1String>(string);
  // QString(const char*);
  /// TODO: QString(const char*);
  // QString(const QByteArray&);
  gonk::bind::constructor<QString, const QByteArray&>(string).create();
  // QString& operator=(const char*);
  /// TODO: QString& operator=(const char*);
  // QString& operator=(const QByteArray&);
  gonk::bind::memop_assign<QString, const QByteArray&>(string);
  // QString& operator=(char);
  gonk::bind::memop_assign<QString, char>(string);
  // QString& prepend(const char*);
  /// TODO: QString& prepend(const char*);
  // QString& prepend(const QByteArray&);
  gonk::bind::member_function<QString, QString&, const QByteArray&, &QString::prepend>(string, "prepend").create();
  // QString& append(const char*);
  /// TODO: QString& append(const char*);
  // QString& append(const QByteArray&);
  gonk::bind::member_function<QString, QString&, const QByteArray&, &QString::append>(string, "append").create();
  // QString& insert(int, const char*);
  /// TODO: QString& insert(int, const char*);
  // QString& insert(int, const QByteArray&);
  gonk::bind::member_function<QString, QString&, int, const QByteArray&, &QString::insert>(string, "insert").create();
  // QString& operator+=(const char*);
  /// TODO: QString& operator+=(const char*);
  // QString& operator+=(const QByteArray&);
  gonk::bind::memop_add_assign<QString, const QByteArray&>(string);
  // QString& operator+=(char);
  gonk::bind::memop_add_assign<QString, char>(string);
  // bool operator==(const char*) const;
  /// TODO: bool operator==(const char*) const;
  // bool operator!=(const char*) const;
  /// TODO: bool operator!=(const char*) const;
  // bool operator<(const char*) const;
  /// TODO: bool operator<(const char*) const;
  // bool operator<=(const char*) const;
  /// TODO: bool operator<=(const char*) const;
  // bool operator>(const char*) const;
  /// TODO: bool operator>(const char*) const;
  // bool operator>=(const char*) const;
  /// TODO: bool operator>=(const char*) const;
  // bool operator==(const QByteArray&) const;
  gonk::bind::memop_eq<QString, const QByteArray&>(string);
  // bool operator!=(const QByteArray&) const;
  gonk::bind::memop_neq<QString, const QByteArray&>(string);
  // bool operator<(const QByteArray&) const;
  gonk::bind::memop_less<QString, const QByteArray&>(string);
  // bool operator>(const QByteArray&) const;
  gonk::bind::memop_greater<QString, const QByteArray&>(string);
  // bool operator<=(const QByteArray&) const;
  gonk::bind::memop_leq<QString, const QByteArray&>(string);
  // bool operator>=(const QByteArray&) const;
  gonk::bind::memop_geq<QString, const QByteArray&>(string);
  // QString::iterator begin();
  /// TODO: QString::iterator begin();
  // QString::const_iterator begin() const;
  /// TODO: QString::const_iterator begin() const;
  // QString::const_iterator cbegin() const;
  /// TODO: QString::const_iterator cbegin() const;
  // QString::const_iterator constBegin() const;
  /// TODO: QString::const_iterator constBegin() const;
  // QString::iterator end();
  /// TODO: QString::iterator end();
  // QString::const_iterator end() const;
  /// TODO: QString::const_iterator end() const;
  // QString::const_iterator cend() const;
  /// TODO: QString::const_iterator cend() const;
  // QString::const_iterator constEnd() const;
  /// TODO: QString::const_iterator constEnd() const;
  // QString::reverse_iterator rbegin();
  /// TODO: QString::reverse_iterator rbegin();
  // QString::reverse_iterator rend();
  /// TODO: QString::reverse_iterator rend();
  // QString::const_reverse_iterator rbegin() const;
  /// TODO: QString::const_reverse_iterator rbegin() const;
  // QString::const_reverse_iterator rend() const;
  /// TODO: QString::const_reverse_iterator rend() const;
  // QString::const_reverse_iterator crbegin() const;
  /// TODO: QString::const_reverse_iterator crbegin() const;
  // QString::const_reverse_iterator crend() const;
  /// TODO: QString::const_reverse_iterator crend() const;
  // void push_back(QChar);
  gonk::bind::void_member_function<QString, QChar, &QString::push_back>(string, "push_back").create();
  // void push_back(const QString&);
  gonk::bind::void_member_function<QString, const QString&, &QString::push_back>(string, "push_back").create();
  // void push_front(QChar);
  gonk::bind::void_member_function<QString, QChar, &QString::push_front>(string, "push_front").create();
  // void push_front(const QString&);
  gonk::bind::void_member_function<QString, const QString&, &QString::push_front>(string, "push_front").create();
  // void shrink_to_fit();
  gonk::bind::void_member_function<QString, &QString::shrink_to_fit>(string, "shrink_to_fit").create();
  // static QString fromStdString(const std::string&);
  gonk::bind::static_member_function<QString, QString, const std::string&, &QString::fromStdString>(string, "fromStdString").create();
  // std::string toStdString() const;
  gonk::bind::member_function<QString, std::string, &QString::toStdString>(string, "toStdString").create();
  // static QString fromStdWString(const std::wstring&);
  /// TODO: static QString fromStdWString(const std::wstring&);
  // std::wstring toStdWString() const;
  /// TODO: std::wstring toStdWString() const;
  // static QString fromStdU16String(const std::u16string&);
  /// TODO: static QString fromStdU16String(const std::u16string&);
  // std::u16string toStdU16String() const;
  /// TODO: std::u16string toStdU16String() const;
  // static QString fromStdU32String(const std::u32string&);
  /// TODO: static QString fromStdU32String(const std::u32string&);
  // std::u32string toStdU32String() const;
  /// TODO: std::u32string toStdU32String() const;
  // QString(const QString::Null&);
  gonk::bind::constructor<QString, const QString::Null&>(string).create();
  // QString& operator=(const QString::Null&);
  gonk::bind::memop_assign<QString, const QString::Null&>(string);
  // bool isNull() const;
  gonk::bind::member_function<QString, bool, &QString::isNull>(string, "isNull").create();
  // bool isSimpleText() const;
  gonk::bind::member_function<QString, bool, &QString::isSimpleText>(string, "isSimpleText").create();
  // bool isRightToLeft() const;
  gonk::bind::member_function<QString, bool, &QString::isRightToLeft>(string, "isRightToLeft").create();
  // QString(int, Qt::Initialization);
  /// TODO: QString(int, Qt::Initialization);
  // QString(QStringDataPtr);
  /// TODO: QString(QStringDataPtr);
  // QString::DataPtr& data_ptr();
  /// TODO: QString::DataPtr& data_ptr();
}


static void register_char_ref_class(script::Namespace ns)
{
  using namespace script;

  Class char_ref = ns.newClass("QCharRef").setId(script::Type::make<QCharRef>().data()).get();


  // QCharRef& operator=(QChar);
  gonk::bind::memop_assign<QCharRef, QChar>(char_ref);
  // QCharRef& operator=(char);
  gonk::bind::memop_assign<QCharRef, char>(char_ref);
  // QCharRef& operator=(uchar);
  /// TODO: QCharRef& operator=(uchar);
  // QCharRef& operator=(const QCharRef&);
  gonk::bind::memop_assign<QCharRef, const QCharRef&>(char_ref);
  // QCharRef& operator=(ushort);
  /// TODO: QCharRef& operator=(ushort);
  // QCharRef& operator=(short);
  /// TODO: QCharRef& operator=(short);
  // QCharRef& operator=(uint);
  /// TODO: QCharRef& operator=(uint);
  // QCharRef& operator=(int);
  gonk::bind::memop_assign<QCharRef, int>(char_ref);
  // bool isNull() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isNull>(char_ref, "isNull").create();
  // bool isPrint() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isPrint>(char_ref, "isPrint").create();
  // bool isPunct() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isPunct>(char_ref, "isPunct").create();
  // bool isSpace() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isSpace>(char_ref, "isSpace").create();
  // bool isMark() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isMark>(char_ref, "isMark").create();
  // bool isLetter() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLetter>(char_ref, "isLetter").create();
  // bool isNumber() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isNumber>(char_ref, "isNumber").create();
  // bool isLetterOrNumber();
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLetterOrNumber>(char_ref, "isLetterOrNumber").create();
  // bool isDigit() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isDigit>(char_ref, "isDigit").create();
  // bool isLower() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLower>(char_ref, "isLower").create();
  // bool isUpper() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isUpper>(char_ref, "isUpper").create();
  // bool isTitleCase() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isTitleCase>(char_ref, "isTitleCase").create();
  // int digitValue() const;
  gonk::bind::member_function<QCharRef, int, &QCharRef::digitValue>(char_ref, "digitValue").create();
  // QChar toLower() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toLower>(char_ref, "toLower").create();
  // QChar toUpper() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toUpper>(char_ref, "toUpper").create();
  // QChar toTitleCase() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toTitleCase>(char_ref, "toTitleCase").create();
  // QChar::Category category() const;
  gonk::bind::member_function<QCharRef, QChar::Category, &QCharRef::category>(char_ref, "category").create();
  // QChar::Direction direction() const;
  gonk::bind::member_function<QCharRef, QChar::Direction, &QCharRef::direction>(char_ref, "direction").create();
  // QChar::JoiningType joiningType() const;
  gonk::bind::member_function<QCharRef, QChar::JoiningType, &QCharRef::joiningType>(char_ref, "joiningType").create();
  // QChar::Joining joining() const;
  gonk::bind::member_function<QCharRef, QChar::Joining, &QCharRef::joining>(char_ref, "joining").create();
  // bool hasMirrored() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::hasMirrored>(char_ref, "hasMirrored").create();
  // QChar mirroredChar() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::mirroredChar>(char_ref, "mirroredChar").create();
  // QString decomposition() const;
  gonk::bind::member_function<QCharRef, QString, &QCharRef::decomposition>(char_ref, "decomposition").create();
  // QChar::Decomposition decompositionTag() const;
  gonk::bind::member_function<QCharRef, QChar::Decomposition, &QCharRef::decompositionTag>(char_ref, "decompositionTag").create();
  // uchar combiningClass() const;
  /// TODO: uchar combiningClass() const;
  // QChar::Script script() const;
  gonk::bind::member_function<QCharRef, QChar::Script, &QCharRef::script>(char_ref, "script").create();
  // QChar::UnicodeVersion unicodeVersion() const;
  gonk::bind::member_function<QCharRef, QChar::UnicodeVersion, &QCharRef::unicodeVersion>(char_ref, "unicodeVersion").create();
  // uchar cell() const;
  /// TODO: uchar cell() const;
  // uchar row() const;
  /// TODO: uchar row() const;
  // void setCell(uchar);
  /// TODO: void setCell(uchar);
  // void setRow(uchar);
  /// TODO: void setRow(uchar);
  // char toLatin1() const;
  gonk::bind::member_function<QCharRef, char, &QCharRef::toLatin1>(char_ref, "toLatin1").create();
  // ushort unicode() const;
  /// TODO: ushort unicode() const;
  // ushort& unicode();
  /// TODO: ushort& unicode();
}


static void register_string_ref_class(script::Namespace ns)
{
  using namespace script;

  Class string_ref = ns.newClass("QStringRef").setId(script::Type::make<QStringRef>().data()).get();


  // QStringRef();
  gonk::bind::default_constructor<QStringRef>(string_ref).create();
  // QStringRef(const QString*, int, int);
  /// TODO: QStringRef(const QString*, int, int);
  // QStringRef(const QString*);
  /// TODO: QStringRef(const QString*);
  // QStringRef(const QStringRef&);
  gonk::bind::constructor<QStringRef, const QStringRef&>(string_ref).create();
  // QStringRef(QStringRef&&);
  gonk::bind::constructor<QStringRef, QStringRef&&>(string_ref).create();
  // QStringRef& operator=(QStringRef&&);
  gonk::bind::memop_assign<QStringRef, QStringRef&&>(string_ref);
  // QStringRef& operator=(const QStringRef&);
  gonk::bind::memop_assign<QStringRef, const QStringRef&>(string_ref);
  // ~QStringRef();
  gonk::bind::destructor<QStringRef>(string_ref).create();
  // const QString* string() const;
  /// TODO: const QString* string() const;
  // int position() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::position>(string_ref, "position").create();
  // int size() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::size>(string_ref, "size").create();
  // int count() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::count>(string_ref, "count").create();
  // int length() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::length>(string_ref, "length").create();
  // int indexOf(const QString&, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(const QString&, int, Qt::CaseSensitivity) const;
  // int indexOf(QChar, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(QChar, int, Qt::CaseSensitivity) const;
  // int indexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  // int indexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  /// TODO: int indexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(const QString&, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(const QString&, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(QChar, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(QChar, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(QLatin1String, int, Qt::CaseSensitivity) const;
  // int lastIndexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  /// TODO: int lastIndexOf(const QStringRef&, int, Qt::CaseSensitivity) const;
  // bool contains(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool contains(const QString&, Qt::CaseSensitivity) const;
  // bool contains(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool contains(QChar, Qt::CaseSensitivity) const;
  // bool contains(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool contains(QLatin1String, Qt::CaseSensitivity) const;
  // bool contains(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool contains(const QStringRef&, Qt::CaseSensitivity) const;
  // int count(const QString&, Qt::CaseSensitivity) const;
  /// TODO: int count(const QString&, Qt::CaseSensitivity) const;
  // int count(QChar, Qt::CaseSensitivity) const;
  /// TODO: int count(QChar, Qt::CaseSensitivity) const;
  // int count(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: int count(const QStringRef&, Qt::CaseSensitivity) const;
  // QVector<QStringRef> split(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QVector<QStringRef> split(const QString&, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QVector<QStringRef> split(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  /// TODO: QVector<QStringRef> split(QChar, QString::SplitBehavior, Qt::CaseSensitivity) const;
  // QStringRef left(int) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::left>(string_ref, "left").create();
  // QStringRef right(int) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::right>(string_ref, "right").create();
  // QStringRef mid(int, int) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, int, &QStringRef::mid>(string_ref, "mid").create();
  // QStringRef chopped(int) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::chopped>(string_ref, "chopped").create();
  // void truncate(int);
  gonk::bind::void_member_function<QStringRef, int, &QStringRef::truncate>(string_ref, "truncate").create();
  // void chop(int);
  gonk::bind::void_member_function<QStringRef, int, &QStringRef::chop>(string_ref, "chop").create();
  // bool isRightToLeft() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isRightToLeft>(string_ref, "isRightToLeft").create();
  // bool startsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QStringView, Qt::CaseSensitivity) const;
  // bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool startsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(QChar, Qt::CaseSensitivity) const;
  // bool startsWith(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(const QString&, Qt::CaseSensitivity) const;
  // bool startsWith(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool startsWith(const QStringRef&, Qt::CaseSensitivity) const;
  // bool endsWith(QStringView, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QStringView, Qt::CaseSensitivity) const;
  // bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QLatin1String, Qt::CaseSensitivity) const;
  // bool endsWith(QChar, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(QChar, Qt::CaseSensitivity) const;
  // bool endsWith(const QString&, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(const QString&, Qt::CaseSensitivity) const;
  // bool endsWith(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: bool endsWith(const QStringRef&, Qt::CaseSensitivity) const;
  // QStringRef& operator=(const QString*);
  /// TODO: QStringRef& operator=(const QString*);
  // const QChar* unicode() const;
  /// TODO: const QChar* unicode() const;
  // const QChar* data() const;
  /// TODO: const QChar* data() const;
  // const QChar* constData() const;
  /// TODO: const QChar* constData() const;
  // QStringRef::const_iterator begin() const;
  /// TODO: QStringRef::const_iterator begin() const;
  // QStringRef::const_iterator cbegin() const;
  /// TODO: QStringRef::const_iterator cbegin() const;
  // QStringRef::const_iterator constBegin() const;
  /// TODO: QStringRef::const_iterator constBegin() const;
  // QStringRef::const_iterator end() const;
  /// TODO: QStringRef::const_iterator end() const;
  // QStringRef::const_iterator cend() const;
  /// TODO: QStringRef::const_iterator cend() const;
  // QStringRef::const_iterator constEnd() const;
  /// TODO: QStringRef::const_iterator constEnd() const;
  // QStringRef::const_reverse_iterator rbegin() const;
  /// TODO: QStringRef::const_reverse_iterator rbegin() const;
  // QStringRef::const_reverse_iterator crbegin() const;
  /// TODO: QStringRef::const_reverse_iterator crbegin() const;
  // QStringRef::const_reverse_iterator rend() const;
  /// TODO: QStringRef::const_reverse_iterator rend() const;
  // QStringRef::const_reverse_iterator crend() const;
  /// TODO: QStringRef::const_reverse_iterator crend() const;
  // QByteArray toLatin1() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toLatin1>(string_ref, "toLatin1").create();
  // QByteArray toUtf8() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toUtf8>(string_ref, "toUtf8").create();
  // QByteArray toLocal8Bit() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toLocal8Bit>(string_ref, "toLocal8Bit").create();
  // QVector<uint> toUcs4() const;
  /// TODO: QVector<uint> toUcs4() const;
  // void clear();
  gonk::bind::void_member_function<QStringRef, &QStringRef::clear>(string_ref, "clear").create();
  // QString toString() const;
  gonk::bind::member_function<QStringRef, QString, &QStringRef::toString>(string_ref, "toString").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isEmpty>(string_ref, "isEmpty").create();
  // bool isNull() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isNull>(string_ref, "isNull").create();
  // QStringRef appendTo(QString*) const;
  /// TODO: QStringRef appendTo(QString*) const;
  // const QChar at(int) const;
  gonk::bind::member_function<QStringRef, const QChar, int, &QStringRef::at>(string_ref, "at").create();
  // QChar operator[](int) const;
  gonk::bind::memop_const_subscript<QStringRef, QChar, int>(string_ref);
  // QChar front() const;
  gonk::bind::member_function<QStringRef, QChar, &QStringRef::front>(string_ref, "front").create();
  // QChar back() const;
  gonk::bind::member_function<QStringRef, QChar, &QStringRef::back>(string_ref, "back").create();
  // bool operator==(const char*) const;
  /// TODO: bool operator==(const char*) const;
  // bool operator!=(const char*) const;
  /// TODO: bool operator!=(const char*) const;
  // bool operator<(const char*) const;
  /// TODO: bool operator<(const char*) const;
  // bool operator<=(const char*) const;
  /// TODO: bool operator<=(const char*) const;
  // bool operator>(const char*) const;
  /// TODO: bool operator>(const char*) const;
  // bool operator>=(const char*) const;
  /// TODO: bool operator>=(const char*) const;
  // int compare(const QString&, Qt::CaseSensitivity) const;
  /// TODO: int compare(const QString&, Qt::CaseSensitivity) const;
  // int compare(const QStringRef&, Qt::CaseSensitivity) const;
  /// TODO: int compare(const QStringRef&, Qt::CaseSensitivity) const;
  // int compare(QLatin1String, Qt::CaseSensitivity) const;
  /// TODO: int compare(QLatin1String, Qt::CaseSensitivity) const;
  // int compare(const QByteArray&, Qt::CaseSensitivity) const;
  /// TODO: int compare(const QByteArray&, Qt::CaseSensitivity) const;
  // static int compare(const QStringRef&, const QString&, Qt::CaseSensitivity);
  /// TODO: static int compare(const QStringRef&, const QString&, Qt::CaseSensitivity);
  // static int compare(const QStringRef&, const QStringRef&, Qt::CaseSensitivity);
  /// TODO: static int compare(const QStringRef&, const QStringRef&, Qt::CaseSensitivity);
  // static int compare(const QStringRef&, QLatin1String, Qt::CaseSensitivity);
  /// TODO: static int compare(const QStringRef&, QLatin1String, Qt::CaseSensitivity);
  // int localeAwareCompare(const QString&) const;
  gonk::bind::member_function<QStringRef, int, const QString&, &QStringRef::localeAwareCompare>(string_ref, "localeAwareCompare").create();
  // int localeAwareCompare(const QStringRef&) const;
  gonk::bind::member_function<QStringRef, int, const QStringRef&, &QStringRef::localeAwareCompare>(string_ref, "localeAwareCompare").create();
  // static int localeAwareCompare(const QStringRef&, const QString&);
  gonk::bind::static_member_function<QStringRef, int, const QStringRef&, const QString&, &QStringRef::localeAwareCompare>(string_ref, "localeAwareCompare").create();
  // static int localeAwareCompare(const QStringRef&, const QStringRef&);
  gonk::bind::static_member_function<QStringRef, int, const QStringRef&, const QStringRef&, &QStringRef::localeAwareCompare>(string_ref, "localeAwareCompare").create();
  // QStringRef trimmed() const;
  gonk::bind::member_function<QStringRef, QStringRef, &QStringRef::trimmed>(string_ref, "trimmed").create();
  // short toShort(bool*, int) const;
  /// TODO: short toShort(bool*, int) const;
  // ushort toUShort(bool*, int) const;
  /// TODO: ushort toUShort(bool*, int) const;
  // int toInt(bool*, int) const;
  /// TODO: int toInt(bool*, int) const;
  // uint toUInt(bool*, int) const;
  /// TODO: uint toUInt(bool*, int) const;
  // long toLong(bool*, int) const;
  /// TODO: long toLong(bool*, int) const;
  // ulong toULong(bool*, int) const;
  /// TODO: ulong toULong(bool*, int) const;
  // qlonglong toLongLong(bool*, int) const;
  /// TODO: qlonglong toLongLong(bool*, int) const;
  // qulonglong toULongLong(bool*, int) const;
  /// TODO: qulonglong toULongLong(bool*, int) const;
  // float toFloat(bool*) const;
  /// TODO: float toFloat(bool*) const;
  // double toDouble(bool*) const;
  /// TODO: double toDouble(bool*) const;
}


void register_string_file(script::Namespace ns)
{
  using namespace script;


  register_latin1_string_class(ns);
  register_string_class(ns);
  register_char_ref_class(ns);
  register_string_ref_class(ns);

  // bool operator==(QString::Null, QString::Null);
  gonk::bind::op_eq<QString::Null, QString::Null>(ns);
  // bool operator==(QString::Null, const QString&);
  gonk::bind::op_eq<QString::Null, const QString&>(ns);
  // bool operator==(const QString&, QString::Null);
  gonk::bind::op_eq<const QString&, QString::Null>(ns);
  // bool operator!=(QString::Null, QString::Null);
  gonk::bind::op_neq<QString::Null, QString::Null>(ns);
  // bool operator!=(QString::Null, const QString&);
  gonk::bind::op_neq<QString::Null, const QString&>(ns);
  // bool operator!=(const QString&, QString::Null);
  gonk::bind::op_neq<const QString&, QString::Null>(ns);
  // bool operator==(QLatin1String, QLatin1String);
  gonk::bind::op_eq<QLatin1String, QLatin1String>(ns);
  // bool operator!=(QLatin1String, QLatin1String);
  gonk::bind::op_neq<QLatin1String, QLatin1String>(ns);
  // bool operator<(QLatin1String, QLatin1String);
  gonk::bind::op_less<QLatin1String, QLatin1String>(ns);
  // bool operator>(QLatin1String, QLatin1String);
  gonk::bind::op_greater<QLatin1String, QLatin1String>(ns);
  // bool operator<=(QLatin1String, QLatin1String);
  gonk::bind::op_leq<QLatin1String, QLatin1String>(ns);
  // bool operator>=(QLatin1String, QLatin1String);
  gonk::bind::op_geq<QLatin1String, QLatin1String>(ns);
  // bool operator==(const char*, const QString&);
  /// TODO: bool operator==(const char*, const QString&);
  // bool operator!=(const char*, const QString&);
  /// TODO: bool operator!=(const char*, const QString&);
  // bool operator<(const char*, const QString&);
  /// TODO: bool operator<(const char*, const QString&);
  // bool operator>(const char*, const QString&);
  /// TODO: bool operator>(const char*, const QString&);
  // bool operator<=(const char*, const QString&);
  /// TODO: bool operator<=(const char*, const QString&);
  // bool operator>=(const char*, const QString&);
  /// TODO: bool operator>=(const char*, const QString&);
  // bool operator==(const char*, QLatin1String);
  /// TODO: bool operator==(const char*, QLatin1String);
  // bool operator!=(const char*, QLatin1String);
  /// TODO: bool operator!=(const char*, QLatin1String);
  // bool operator<(const char*, QLatin1String);
  /// TODO: bool operator<(const char*, QLatin1String);
  // bool operator>(const char*, QLatin1String);
  /// TODO: bool operator>(const char*, QLatin1String);
  // bool operator<=(const char*, QLatin1String);
  /// TODO: bool operator<=(const char*, QLatin1String);
  // bool operator>=(const char*, QLatin1String);
  /// TODO: bool operator>=(const char*, QLatin1String);
  // const QString operator+(const QString&, const QString&);
  gonk::bind::op_add<const QString, const QString&, const QString&>(ns);
  // const QString operator+(const QString&, QChar);
  gonk::bind::op_add<const QString, const QString&, QChar>(ns);
  // const QString operator+(QChar, const QString&);
  gonk::bind::op_add<const QString, QChar, const QString&>(ns);
  // const QString operator+(const QString&, const char*);
  /// TODO: const QString operator+(const QString&, const char*);
  // const QString operator+(const char*, const QString&);
  /// TODO: const QString operator+(const char*, const QString&);
  // const QString operator+(char, const QString&);
  gonk::bind::op_add<const QString, char, const QString&>(ns);
  // const QString operator+(const QString&, char);
  gonk::bind::op_add<const QString, const QString&, char>(ns);
  // const QString operator+(const QByteArray&, const QString&);
  gonk::bind::op_add<const QString, const QByteArray&, const QString&>(ns);
  // const QString operator+(const QString&, const QByteArray&);
  gonk::bind::op_add<const QString, const QString&, const QByteArray&>(ns);
  // QDataStream& operator<<(QDataStream&, const QString&);
  /// TODO: QDataStream& operator<<(QDataStream&, const QString&);
  // QDataStream& operator>>(QDataStream&, QString&);
  /// TODO: QDataStream& operator>>(QDataStream&, QString&);
  // void swap(QString&, QString&);
  gonk::bind::void_function<QString&, QString&, &swap>(ns, "swap").create();
  // QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QString::SectionFlags::enum_type);
  /// TODO: QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QString::SectionFlags::enum_type);
  // QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QFlags<QString::SectionFlags::enum_type>);
  /// TODO: QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QFlags<QString::SectionFlags::enum_type>);
  // QIncompatibleFlag operator|(QString::SectionFlags::enum_type, int);
  /// TODO: QIncompatibleFlag operator|(QString::SectionFlags::enum_type, int);
  // bool operator==(const QStringRef&, const QStringRef&);
  gonk::bind::op_eq<const QStringRef&, const QStringRef&>(ns);
  // bool operator!=(const QStringRef&, const QStringRef&);
  gonk::bind::op_neq<const QStringRef&, const QStringRef&>(ns);
  // bool operator<(const QStringRef&, const QStringRef&);
  gonk::bind::op_less<const QStringRef&, const QStringRef&>(ns);
  // bool operator>(const QStringRef&, const QStringRef&);
  gonk::bind::op_greater<const QStringRef&, const QStringRef&>(ns);
  // bool operator<=(const QStringRef&, const QStringRef&);
  gonk::bind::op_leq<const QStringRef&, const QStringRef&>(ns);
  // bool operator>=(const QStringRef&, const QStringRef&);
  gonk::bind::op_geq<const QStringRef&, const QStringRef&>(ns);
  // bool operator==(const QString&, const QStringRef&);
  gonk::bind::op_eq<const QString&, const QStringRef&>(ns);
  // bool operator!=(const QString&, const QStringRef&);
  gonk::bind::op_neq<const QString&, const QStringRef&>(ns);
  // bool operator<(const QString&, const QStringRef&);
  gonk::bind::op_less<const QString&, const QStringRef&>(ns);
  // bool operator>(const QString&, const QStringRef&);
  gonk::bind::op_greater<const QString&, const QStringRef&>(ns);
  // bool operator<=(const QString&, const QStringRef&);
  gonk::bind::op_leq<const QString&, const QStringRef&>(ns);
  // bool operator>=(const QString&, const QStringRef&);
  gonk::bind::op_geq<const QString&, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, const QString&);
  gonk::bind::op_eq<const QStringRef&, const QString&>(ns);
  // bool operator!=(const QStringRef&, const QString&);
  gonk::bind::op_neq<const QStringRef&, const QString&>(ns);
  // bool operator<(const QStringRef&, const QString&);
  gonk::bind::op_less<const QStringRef&, const QString&>(ns);
  // bool operator>(const QStringRef&, const QString&);
  gonk::bind::op_greater<const QStringRef&, const QString&>(ns);
  // bool operator<=(const QStringRef&, const QString&);
  gonk::bind::op_leq<const QStringRef&, const QString&>(ns);
  // bool operator>=(const QStringRef&, const QString&);
  gonk::bind::op_geq<const QStringRef&, const QString&>(ns);
  // bool operator==(QLatin1String, const QStringRef&);
  gonk::bind::op_eq<QLatin1String, const QStringRef&>(ns);
  // bool operator!=(QLatin1String, const QStringRef&);
  gonk::bind::op_neq<QLatin1String, const QStringRef&>(ns);
  // bool operator<(QLatin1String, const QStringRef&);
  gonk::bind::op_less<QLatin1String, const QStringRef&>(ns);
  // bool operator>(QLatin1String, const QStringRef&);
  gonk::bind::op_greater<QLatin1String, const QStringRef&>(ns);
  // bool operator<=(QLatin1String, const QStringRef&);
  gonk::bind::op_leq<QLatin1String, const QStringRef&>(ns);
  // bool operator>=(QLatin1String, const QStringRef&);
  gonk::bind::op_geq<QLatin1String, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, QLatin1String);
  gonk::bind::op_eq<const QStringRef&, QLatin1String>(ns);
  // bool operator!=(const QStringRef&, QLatin1String);
  gonk::bind::op_neq<const QStringRef&, QLatin1String>(ns);
  // bool operator<(const QStringRef&, QLatin1String);
  gonk::bind::op_less<const QStringRef&, QLatin1String>(ns);
  // bool operator>(const QStringRef&, QLatin1String);
  gonk::bind::op_greater<const QStringRef&, QLatin1String>(ns);
  // bool operator<=(const QStringRef&, QLatin1String);
  gonk::bind::op_leq<const QStringRef&, QLatin1String>(ns);
  // bool operator>=(const QStringRef&, QLatin1String);
  gonk::bind::op_geq<const QStringRef&, QLatin1String>(ns);
  // bool operator==(QChar, const QString&);
  gonk::bind::op_eq<QChar, const QString&>(ns);
  // bool operator<(QChar, const QString&);
  gonk::bind::op_less<QChar, const QString&>(ns);
  // bool operator>(QChar, const QString&);
  gonk::bind::op_greater<QChar, const QString&>(ns);
  // bool operator!=(QChar, const QString&);
  gonk::bind::op_neq<QChar, const QString&>(ns);
  // bool operator<=(QChar, const QString&);
  gonk::bind::op_leq<QChar, const QString&>(ns);
  // bool operator>=(QChar, const QString&);
  gonk::bind::op_geq<QChar, const QString&>(ns);
  // bool operator==(const QString&, QChar);
  gonk::bind::op_eq<const QString&, QChar>(ns);
  // bool operator!=(const QString&, QChar);
  gonk::bind::op_neq<const QString&, QChar>(ns);
  // bool operator<(const QString&, QChar);
  gonk::bind::op_less<const QString&, QChar>(ns);
  // bool operator>(const QString&, QChar);
  gonk::bind::op_greater<const QString&, QChar>(ns);
  // bool operator<=(const QString&, QChar);
  gonk::bind::op_leq<const QString&, QChar>(ns);
  // bool operator>=(const QString&, QChar);
  gonk::bind::op_geq<const QString&, QChar>(ns);
  // bool operator==(QChar, const QStringRef&);
  gonk::bind::op_eq<QChar, const QStringRef&>(ns);
  // bool operator<(QChar, const QStringRef&);
  gonk::bind::op_less<QChar, const QStringRef&>(ns);
  // bool operator>(QChar, const QStringRef&);
  gonk::bind::op_greater<QChar, const QStringRef&>(ns);
  // bool operator!=(QChar, const QStringRef&);
  gonk::bind::op_neq<QChar, const QStringRef&>(ns);
  // bool operator<=(QChar, const QStringRef&);
  gonk::bind::op_leq<QChar, const QStringRef&>(ns);
  // bool operator>=(QChar, const QStringRef&);
  gonk::bind::op_geq<QChar, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, QChar);
  gonk::bind::op_eq<const QStringRef&, QChar>(ns);
  // bool operator!=(const QStringRef&, QChar);
  gonk::bind::op_neq<const QStringRef&, QChar>(ns);
  // bool operator<(const QStringRef&, QChar);
  gonk::bind::op_less<const QStringRef&, QChar>(ns);
  // bool operator>(const QStringRef&, QChar);
  gonk::bind::op_greater<const QStringRef&, QChar>(ns);
  // bool operator<=(const QStringRef&, QChar);
  gonk::bind::op_leq<const QStringRef&, QChar>(ns);
  // bool operator>=(const QStringRef&, QChar);
  gonk::bind::op_geq<const QStringRef&, QChar>(ns);
  // bool operator==(QChar, QLatin1String);
  gonk::bind::op_eq<QChar, QLatin1String>(ns);
  // bool operator<(QChar, QLatin1String);
  gonk::bind::op_less<QChar, QLatin1String>(ns);
  // bool operator>(QChar, QLatin1String);
  gonk::bind::op_greater<QChar, QLatin1String>(ns);
  // bool operator!=(QChar, QLatin1String);
  gonk::bind::op_neq<QChar, QLatin1String>(ns);
  // bool operator<=(QChar, QLatin1String);
  gonk::bind::op_leq<QChar, QLatin1String>(ns);
  // bool operator>=(QChar, QLatin1String);
  gonk::bind::op_geq<QChar, QLatin1String>(ns);
  // bool operator==(QLatin1String, QChar);
  gonk::bind::op_eq<QLatin1String, QChar>(ns);
  // bool operator!=(QLatin1String, QChar);
  gonk::bind::op_neq<QLatin1String, QChar>(ns);
  // bool operator<(QLatin1String, QChar);
  gonk::bind::op_less<QLatin1String, QChar>(ns);
  // bool operator>(QLatin1String, QChar);
  gonk::bind::op_greater<QLatin1String, QChar>(ns);
  // bool operator<=(QLatin1String, QChar);
  gonk::bind::op_leq<QLatin1String, QChar>(ns);
  // bool operator>=(QLatin1String, QChar);
  gonk::bind::op_geq<QLatin1String, QChar>(ns);
  // bool operator==(QStringView, QStringView);
  /// TODO: bool operator==(QStringView, QStringView);
  // bool operator!=(QStringView, QStringView);
  /// TODO: bool operator!=(QStringView, QStringView);
  // bool operator<(QStringView, QStringView);
  /// TODO: bool operator<(QStringView, QStringView);
  // bool operator<=(QStringView, QStringView);
  /// TODO: bool operator<=(QStringView, QStringView);
  // bool operator>(QStringView, QStringView);
  /// TODO: bool operator>(QStringView, QStringView);
  // bool operator>=(QStringView, QStringView);
  /// TODO: bool operator>=(QStringView, QStringView);
  // bool operator==(QStringView, QChar);
  /// TODO: bool operator==(QStringView, QChar);
  // bool operator!=(QStringView, QChar);
  /// TODO: bool operator!=(QStringView, QChar);
  // bool operator<(QStringView, QChar);
  /// TODO: bool operator<(QStringView, QChar);
  // bool operator<=(QStringView, QChar);
  /// TODO: bool operator<=(QStringView, QChar);
  // bool operator>(QStringView, QChar);
  /// TODO: bool operator>(QStringView, QChar);
  // bool operator>=(QStringView, QChar);
  /// TODO: bool operator>=(QStringView, QChar);
  // bool operator==(QChar, QStringView);
  /// TODO: bool operator==(QChar, QStringView);
  // bool operator!=(QChar, QStringView);
  /// TODO: bool operator!=(QChar, QStringView);
  // bool operator<(QChar, QStringView);
  /// TODO: bool operator<(QChar, QStringView);
  // bool operator<=(QChar, QStringView);
  /// TODO: bool operator<=(QChar, QStringView);
  // bool operator>(QChar, QStringView);
  /// TODO: bool operator>(QChar, QStringView);
  // bool operator>=(QChar, QStringView);
  /// TODO: bool operator>=(QChar, QStringView);
  // bool operator==(QStringView, QLatin1String);
  /// TODO: bool operator==(QStringView, QLatin1String);
  // bool operator!=(QStringView, QLatin1String);
  /// TODO: bool operator!=(QStringView, QLatin1String);
  // bool operator<(QStringView, QLatin1String);
  /// TODO: bool operator<(QStringView, QLatin1String);
  // bool operator<=(QStringView, QLatin1String);
  /// TODO: bool operator<=(QStringView, QLatin1String);
  // bool operator>(QStringView, QLatin1String);
  /// TODO: bool operator>(QStringView, QLatin1String);
  // bool operator>=(QStringView, QLatin1String);
  /// TODO: bool operator>=(QStringView, QLatin1String);
  // bool operator==(QLatin1String, QStringView);
  /// TODO: bool operator==(QLatin1String, QStringView);
  // bool operator!=(QLatin1String, QStringView);
  /// TODO: bool operator!=(QLatin1String, QStringView);
  // bool operator<(QLatin1String, QStringView);
  /// TODO: bool operator<(QLatin1String, QStringView);
  // bool operator<=(QLatin1String, QStringView);
  /// TODO: bool operator<=(QLatin1String, QStringView);
  // bool operator>(QLatin1String, QStringView);
  /// TODO: bool operator>(QLatin1String, QStringView);
  // bool operator>=(QLatin1String, QStringView);
  /// TODO: bool operator>=(QLatin1String, QStringView);
  // bool operator==(const QStringRef&, const QByteArray&);
  gonk::bind::op_eq<const QStringRef&, const QByteArray&>(ns);
  // bool operator!=(const QStringRef&, const QByteArray&);
  gonk::bind::op_neq<const QStringRef&, const QByteArray&>(ns);
  // bool operator<(const QStringRef&, const QByteArray&);
  gonk::bind::op_less<const QStringRef&, const QByteArray&>(ns);
  // bool operator>(const QStringRef&, const QByteArray&);
  gonk::bind::op_greater<const QStringRef&, const QByteArray&>(ns);
  // bool operator<=(const QStringRef&, const QByteArray&);
  gonk::bind::op_leq<const QStringRef&, const QByteArray&>(ns);
  // bool operator>=(const QStringRef&, const QByteArray&);
  gonk::bind::op_geq<const QStringRef&, const QByteArray&>(ns);
  // bool operator==(const QByteArray&, const QStringRef&);
  gonk::bind::op_eq<const QByteArray&, const QStringRef&>(ns);
  // bool operator!=(const QByteArray&, const QStringRef&);
  gonk::bind::op_neq<const QByteArray&, const QStringRef&>(ns);
  // bool operator<(const QByteArray&, const QStringRef&);
  gonk::bind::op_less<const QByteArray&, const QStringRef&>(ns);
  // bool operator>(const QByteArray&, const QStringRef&);
  gonk::bind::op_greater<const QByteArray&, const QStringRef&>(ns);
  // bool operator<=(const QByteArray&, const QStringRef&);
  gonk::bind::op_leq<const QByteArray&, const QStringRef&>(ns);
  // bool operator>=(const QByteArray&, const QStringRef&);
  gonk::bind::op_geq<const QByteArray&, const QStringRef&>(ns);
  // bool operator==(const char*, const QStringRef&);
  /// TODO: bool operator==(const char*, const QStringRef&);
  // bool operator!=(const char*, const QStringRef&);
  /// TODO: bool operator!=(const char*, const QStringRef&);
  // bool operator<(const char*, const QStringRef&);
  /// TODO: bool operator<(const char*, const QStringRef&);
  // bool operator<=(const char*, const QStringRef&);
  /// TODO: bool operator<=(const char*, const QStringRef&);
  // bool operator>(const char*, const QStringRef&);
  /// TODO: bool operator>(const char*, const QStringRef&);
  // bool operator>=(const char*, const QStringRef&);
  /// TODO: bool operator>=(const char*, const QStringRef&);
  // QString operator+(const QString&, const QStringRef&);
  gonk::bind::op_add<QString, const QString&, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, const QString&);
  gonk::bind::op_add<QString, const QStringRef&, const QString&>(ns);
  // QString operator+(const QStringRef&, QLatin1String);
  gonk::bind::op_add<QString, const QStringRef&, QLatin1String>(ns);
  // QString operator+(QLatin1String, const QStringRef&);
  gonk::bind::op_add<QString, QLatin1String, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, const QStringRef&);
  gonk::bind::op_add<QString, const QStringRef&, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, QChar);
  gonk::bind::op_add<QString, const QStringRef&, QChar>(ns);
  // QString operator+(QChar, const QStringRef&);
  gonk::bind::op_add<QString, QChar, const QStringRef&>(ns);
}
