// Copyright (C) 2020 Vincent Chambrin
// This file is part of the 'gonk' project
// For conditions of distribution and use, see copyright notice in LICENSE

// Warning: This file was generated by metagonk, all modifications will be lost. //

#include "string.h"

#include "gonk/common/binding/class.h"
#include "gonk/common/binding/namespace.h"
#include "gonk/common/enums.h"

#include <script/classbuilder.h>
#include <script/enumbuilder.h>

#include "qt-core/bytearray.h"
#include "qt-core/char_.h"
#include "qt-core/string.h"

#if METAGONK_SOURCE
{% assign classes = ['QLatin1String', 'QString', 'QCharRef', 'QStringRef'] %}
{% include generate_all_classes with module = 'Qt.Core' and classes = classes %}
#else

static void register_latin1_string(script::Namespace& parent)
{
  using namespace script;
  
  Class latin1_string = parent.newClass("QLatin1String").setId(script::Type::make<QLatin1String>().data())
    .get();

  Class& c = latin1_string;
  

  // QLatin1String();
  gonk::bind::default_constructor<QLatin1String>(c).create();
  // QLatin1String(const char* s);
  /// TODO: QLatin1String(const char* s);
  // QLatin1String(const char* f, const char* l);
  /// TODO: QLatin1String(const char* f, const char* l);
  // QLatin1String(const char* s, int sz);
  /// TODO: QLatin1String(const char* s, int sz);
  // QLatin1String(const QByteArray& s);
  gonk::bind::constructor<QLatin1String, const QByteArray&>(c).create();
  // const char* latin1() const;
  /// TODO: const char* latin1() const;
  // int size() const;
  gonk::bind::member_function<QLatin1String, int, &QLatin1String::size>(c, "size").create();
  // const char* data() const;
  /// TODO: const char* data() const;
  // bool isNull() const;
  gonk::bind::member_function<QLatin1String, bool, &QLatin1String::isNull>(c, "isNull").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QLatin1String, bool, &QLatin1String::isEmpty>(c, "isEmpty").create();
  // QLatin1Char at(int i) const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, int, &QLatin1String::at>(c, "at").create();
  // QLatin1Char operator[](int i) const;
  gonk::bind::memop_const_subscript<QLatin1String, QLatin1Char, int>(c);
  // QLatin1Char front() const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, &QLatin1String::front>(c, "front").create();
  // QLatin1Char back() const;
  gonk::bind::member_function<QLatin1String, QLatin1Char, &QLatin1String::back>(c, "back").create();
  // int compare(QStringView other, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QStringView other, Qt::CaseSensitivity cs) const;
  // int compare(QLatin1String other, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QLatin1String other, Qt::CaseSensitivity cs) const;
  // int compare(QChar c) const;
  gonk::bind::member_function<QLatin1String, int, QChar, &QLatin1String::compare>(c, "compare").create();
  // int compare(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QChar c, Qt::CaseSensitivity cs) const;
  // bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QChar c) const;
  gonk::bind::member_function<QLatin1String, bool, QChar, &QLatin1String::startsWith>(c, "startsWith").create();
  // bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  // bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QChar c) const;
  gonk::bind::member_function<QLatin1String, bool, QChar, &QLatin1String::endsWith>(c, "endsWith").create();
  // bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  // int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  // bool contains(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QStringView s, Qt::CaseSensitivity cs) const;
  // bool contains(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool contains(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QChar c, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  // QLatin1String::const_iterator begin() const;
  /// TODO: QLatin1String::const_iterator begin() const;
  // QLatin1String::const_iterator cbegin() const;
  /// TODO: QLatin1String::const_iterator cbegin() const;
  // QLatin1String::const_iterator end() const;
  /// TODO: QLatin1String::const_iterator end() const;
  // QLatin1String::const_iterator cend() const;
  /// TODO: QLatin1String::const_iterator cend() const;
  // QLatin1String::const_reverse_iterator rbegin() const;
  /// TODO: QLatin1String::const_reverse_iterator rbegin() const;
  // QLatin1String::const_reverse_iterator crbegin() const;
  /// TODO: QLatin1String::const_reverse_iterator crbegin() const;
  // QLatin1String::const_reverse_iterator rend() const;
  /// TODO: QLatin1String::const_reverse_iterator rend() const;
  // QLatin1String::const_reverse_iterator crend() const;
  /// TODO: QLatin1String::const_reverse_iterator crend() const;
  // QLatin1String mid(int pos) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::mid>(c, "mid").create();
  // QLatin1String mid(int pos, int n) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, int, &QLatin1String::mid>(c, "mid").create();
  // QLatin1String left(int n) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::left>(c, "left").create();
  // QLatin1String right(int n) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::right>(c, "right").create();
  // QLatin1String chopped(int n) const;
  gonk::bind::member_function<QLatin1String, QLatin1String, int, &QLatin1String::chopped>(c, "chopped").create();
  // void chop(int n);
  gonk::bind::void_member_function<QLatin1String, int, &QLatin1String::chop>(c, "chop").create();
  // void truncate(int n);
  gonk::bind::void_member_function<QLatin1String, int, &QLatin1String::truncate>(c, "truncate").create();
  // QLatin1String trimmed() const;
  gonk::bind::member_function<QLatin1String, QLatin1String, &QLatin1String::trimmed>(c, "trimmed").create();
  // bool operator==(const QString& s) const;
  gonk::bind::memop_eq<QLatin1String, const QString&>(c);
  // bool operator!=(const QString& s) const;
  gonk::bind::memop_neq<QLatin1String, const QString&>(c);
  // bool operator>(const QString& s) const;
  gonk::bind::memop_greater<QLatin1String, const QString&>(c);
  // bool operator<(const QString& s) const;
  gonk::bind::memop_less<QLatin1String, const QString&>(c);
  // bool operator>=(const QString& s) const;
  gonk::bind::memop_geq<QLatin1String, const QString&>(c);
  // bool operator<=(const QString& s) const;
  gonk::bind::memop_leq<QLatin1String, const QString&>(c);
  // bool operator==(const char* s) const;
  /// TODO: bool operator==(const char* s) const;
  // bool operator!=(const char* s) const;
  /// TODO: bool operator!=(const char* s) const;
  // bool operator<(const char* s) const;
  /// TODO: bool operator<(const char* s) const;
  // bool operator>(const char* s) const;
  /// TODO: bool operator>(const char* s) const;
  // bool operator<=(const char* s) const;
  /// TODO: bool operator<=(const char* s) const;
  // bool operator>=(const char* s) const;
  /// TODO: bool operator>=(const char* s) const;
  // bool operator==(const QByteArray& s) const;
  gonk::bind::memop_eq<QLatin1String, const QByteArray&>(c);
  // bool operator!=(const QByteArray& s) const;
  gonk::bind::memop_neq<QLatin1String, const QByteArray&>(c);
  // bool operator<(const QByteArray& s) const;
  gonk::bind::memop_less<QLatin1String, const QByteArray&>(c);
  // bool operator>(const QByteArray& s) const;
  gonk::bind::memop_greater<QLatin1String, const QByteArray&>(c);
  // bool operator<=(const QByteArray& s) const;
  gonk::bind::memop_leq<QLatin1String, const QByteArray&>(c);
  // bool operator>=(const QByteArray& s) const;
  gonk::bind::memop_geq<QLatin1String, const QByteArray&>(c);
}
static void register_string__section_flag(script::Class& parent)
{
  using namespace script;
  
  Enum section_flag = parent.newEnum("SectionFlag").setId(script::Type::make<QString::SectionFlag>().data()).get();

  section_flag.addValue("SectionDefault", QString::SectionFlag::SectionDefault);
  section_flag.addValue("SectionSkipEmpty", QString::SectionFlag::SectionSkipEmpty);
  section_flag.addValue("SectionIncludeLeadingSep", QString::SectionFlag::SectionIncludeLeadingSep);
  section_flag.addValue("SectionIncludeTrailingSep", QString::SectionFlag::SectionIncludeTrailingSep);
  section_flag.addValue("SectionCaseInsensitiveSeps", QString::SectionFlag::SectionCaseInsensitiveSeps);
}
static void register_string__split_behavior(script::Class& parent)
{
  using namespace script;
  
  Enum split_behavior = parent.newEnum("SplitBehavior").setId(script::Type::make<QString::SplitBehavior>().data()).get();

  split_behavior.addValue("KeepEmptyParts", QString::SplitBehavior::KeepEmptyParts);
  split_behavior.addValue("SkipEmptyParts", QString::SplitBehavior::SkipEmptyParts);
}
static void register_string__normalization_form(script::Class& parent)
{
  using namespace script;
  
  Enum normalization_form = parent.newEnum("NormalizationForm").setId(script::Type::make<QString::NormalizationForm>().data()).get();

  normalization_form.addValue("NormalizationForm_D", QString::NormalizationForm::NormalizationForm_D);
  normalization_form.addValue("NormalizationForm_C", QString::NormalizationForm::NormalizationForm_C);
  normalization_form.addValue("NormalizationForm_KD", QString::NormalizationForm::NormalizationForm_KD);
  normalization_form.addValue("NormalizationForm_KC", QString::NormalizationForm::NormalizationForm_KC);
}

static void register_string__null(script::Class& parent)
{
  using namespace script;
  
  Class null = parent.newNestedClass("Null").setId(script::Type::make<QString::Null>().data())
    .get();

  Class& c = null;
  

}
namespace 
{
QString QString_toLower(const QString& self)
{
  return self.toLower();
}
QString QString_toUpper(const QString& self)
{
  return self.toUpper();
}
QString QString_toCaseFolded(const QString& self)
{
  return self.toCaseFolded();
}
QString QString_trimmed(const QString& self)
{
  return self.trimmed();
}
QString QString_simplified(const QString& self)
{
  return self.simplified();
}
QByteArray QString_toLatin1(const QString& self)
{
  return self.toLatin1();
}
QByteArray QString_toUtf8(const QString& self)
{
  return self.toUtf8();
}
QByteArray QString_toLocal8Bit(const QString& self)
{
  return self.toLocal8Bit();
}
}

static void register_string(script::Namespace& parent)
{
  using namespace script;
  
  Class string = parent.newClass("QString").setId(script::Type::make<QString>().data())
    .get();

  Class& c = string;
  
  register_string__section_flag(c);
          register_string__split_behavior(c);
          register_string__normalization_form(c);
          register_string__null(c);
        
  // QString();
  gonk::bind::default_constructor<QString>(c).create();
  // QString(const QChar* unicode, int size);
  /// TODO: QString(const QChar* unicode, int size);
  // QString(QChar c);
  gonk::bind::constructor<QString, QChar>(c).create();
  // QString(int size, QChar c);
  gonk::bind::constructor<QString, int, QChar>(c).create();
  // QString(QLatin1String latin1);
  gonk::bind::constructor<QString, QLatin1String>(c).create();
  // QString(const QString&);
  gonk::bind::constructor<QString, const QString&>(c).create();
  // ~QString();
  gonk::bind::destructor<QString>(c).create();
  // QString& operator=(QChar c);
  gonk::bind::memop_assign<QString, QChar>(c);
  // QString& operator=(const QString&);
  gonk::bind::memop_assign<QString, const QString&>(c);
  // QString& operator=(QLatin1String latin1);
  gonk::bind::memop_assign<QString, QLatin1String>(c);
  // QString(QString&& other);
  gonk::bind::constructor<QString, QString&&>(c).create();
  // QString& operator=(QString&& other);
  gonk::bind::memop_assign<QString, QString&&>(c);
  // void swap(QString& other);
  gonk::bind::void_member_function<QString, QString&, &QString::swap>(c, "swap").create();
  // int size() const;
  gonk::bind::member_function<QString, int, &QString::size>(c, "size").create();
  // int count() const;
  gonk::bind::member_function<QString, int, &QString::count>(c, "count").create();
  // int length() const;
  gonk::bind::member_function<QString, int, &QString::length>(c, "length").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QString, bool, &QString::isEmpty>(c, "isEmpty").create();
  // void resize(int size);
  gonk::bind::void_member_function<QString, int, &QString::resize>(c, "resize").create();
  // void resize(int size, QChar fillChar);
  gonk::bind::void_member_function<QString, int, QChar, &QString::resize>(c, "resize").create();
  // QString& fill(QChar c, int size);
  gonk::bind::member_function<QString, QString&, QChar, int, &QString::fill>(c, "fill").create();
  // void truncate(int pos);
  gonk::bind::void_member_function<QString, int, &QString::truncate>(c, "truncate").create();
  // void chop(int n);
  gonk::bind::void_member_function<QString, int, &QString::chop>(c, "chop").create();
  // int capacity() const;
  gonk::bind::member_function<QString, int, &QString::capacity>(c, "capacity").create();
  // void reserve(int size);
  gonk::bind::void_member_function<QString, int, &QString::reserve>(c, "reserve").create();
  // void squeeze();
  gonk::bind::void_member_function<QString, &QString::squeeze>(c, "squeeze").create();
  // const QChar* unicode() const;
  /// TODO: const QChar* unicode() const;
  // QChar* data();
  /// TODO: QChar* data();
  // const QChar* data() const;
  /// TODO: const QChar* data() const;
  // const QChar* constData() const;
  /// TODO: const QChar* constData() const;
  // void detach();
  gonk::bind::void_member_function<QString, &QString::detach>(c, "detach").create();
  // bool isDetached() const;
  gonk::bind::member_function<QString, bool, &QString::isDetached>(c, "isDetached").create();
  // bool isSharedWith(const QString& other) const;
  gonk::bind::member_function<QString, bool, const QString&, &QString::isSharedWith>(c, "isSharedWith").create();
  // void clear();
  gonk::bind::void_member_function<QString, &QString::clear>(c, "clear").create();
  // const QChar at(int i) const;
  gonk::bind::member_function<QString, const QChar, int, &QString::at>(c, "at").create();
  // const QChar operator[](int i) const;
  gonk::bind::memop_const_subscript<QString, const QChar, int>(c);
  // QCharRef operator[](int i);
  gonk::bind::memop_subscript<QString, QCharRef, int>(c);
  // const QChar operator[](uint i) const;
  /// TODO: const QChar operator[](uint i) const;
  // QCharRef operator[](uint i);
  /// TODO: QCharRef operator[](uint i);
  // QChar front() const;
  gonk::bind::member_function<QString, QChar, &QString::front>(c, "front").create();
  // QCharRef front();
  gonk::bind::member_function<QString, QCharRef, &QString::front>(c, "front").create();
  // QChar back() const;
  gonk::bind::member_function<QString, QChar, &QString::back>(c, "back").create();
  // QCharRef back();
  gonk::bind::member_function<QString, QCharRef, &QString::back>(c, "back").create();
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(0) const;
  /// TODO: QString arg(0) const;
  // QString arg(const QString& a1, const QString& a2) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4, const QString& a5) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4, const QString& a5, const QString& a6) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4, const QString& a5, const QString& a6, const QString& a7) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4, const QString& a5, const QString& a6, const QString& a7, const QString& a8) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString arg(const QString& a1, const QString& a2, const QString& a3, const QString& a4, const QString& a5, const QString& a6, const QString& a7, const QString& a8, const QString& a9) const;
  gonk::bind::member_function<QString, QString, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, const QString&, &QString::arg>(c, "arg").create();
  // QString& vsprintf(const char* format, va_list ap);
  /// TODO: QString& vsprintf(const char* format, va_list ap);
  // QString& sprintf(const char* format);
  /// TODO: QString& sprintf(const char* format);
  // static QString vasprintf(const char* format, va_list ap);
  /// TODO: static QString vasprintf(const char* format, va_list ap);
  // static QString asprintf(const char* format);
  /// TODO: static QString asprintf(const char* format);
  // int indexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(const QString& s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(const QString& s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(const QStringRef& s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(const QStringRef& s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QChar c, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QLatin1String s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(const QString& s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(const QString& s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(const QStringRef& s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(const QStringRef& s, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // bool contains(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QChar c, Qt::CaseSensitivity cs) const;
  // bool contains(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(const QString& s, Qt::CaseSensitivity cs) const;
  // bool contains(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // bool contains(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool contains(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QStringView s, Qt::CaseSensitivity cs) const;
  // int count(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: int count(QChar c, Qt::CaseSensitivity cs) const;
  // int count(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: int count(const QString& s, Qt::CaseSensitivity cs) const;
  // int count(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: int count(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // int indexOf(const QRegExp&, int from) const;
  /// TODO: int indexOf(const QRegExp&, int from) const;
  // int lastIndexOf(const QRegExp&, int from) const;
  /// TODO: int lastIndexOf(const QRegExp&, int from) const;
  // bool contains(const QRegExp& rx) const;
  /// TODO: bool contains(const QRegExp& rx) const;
  // int count(const QRegExp&) const;
  /// TODO: int count(const QRegExp&) const;
  // int indexOf(QRegExp&, int from) const;
  /// TODO: int indexOf(QRegExp&, int from) const;
  // int lastIndexOf(QRegExp&, int from) const;
  /// TODO: int lastIndexOf(QRegExp&, int from) const;
  // bool contains(QRegExp& rx) const;
  /// TODO: bool contains(QRegExp& rx) const;
  // int indexOf(const QRegularExpression& re, int from) const;
  /// TODO: int indexOf(const QRegularExpression& re, int from) const;
  // int indexOf(const QRegularExpression& re, int from, QRegularExpressionMatch* rmatch) const;
  /// TODO: int indexOf(const QRegularExpression& re, int from, QRegularExpressionMatch* rmatch) const;
  // int lastIndexOf(const QRegularExpression& re, int from) const;
  /// TODO: int lastIndexOf(const QRegularExpression& re, int from) const;
  // int lastIndexOf(const QRegularExpression& re, int from, QRegularExpressionMatch* rmatch) const;
  /// TODO: int lastIndexOf(const QRegularExpression& re, int from, QRegularExpressionMatch* rmatch) const;
  // bool contains(const QRegularExpression& re) const;
  /// TODO: bool contains(const QRegularExpression& re) const;
  // bool contains(const QRegularExpression& re, QRegularExpressionMatch* rmatch) const;
  /// TODO: bool contains(const QRegularExpression& re, QRegularExpressionMatch* rmatch) const;
  // int count(const QRegularExpression& re) const;
  /// TODO: int count(const QRegularExpression& re) const;
  // QString section(QChar sep, int start, int end, QString::SectionFlags flags) const;
  /// TODO: QString section(QChar sep, int start, int end, QString::SectionFlags flags) const;
  // QString section(const QString& in_sep, int start, int end, QString::SectionFlags flags) const;
  /// TODO: QString section(const QString& in_sep, int start, int end, QString::SectionFlags flags) const;
  // QString section(const QRegExp& reg, int start, int end, QString::SectionFlags flags) const;
  /// TODO: QString section(const QRegExp& reg, int start, int end, QString::SectionFlags flags) const;
  // QString section(const QRegularExpression& re, int start, int end, QString::SectionFlags flags) const;
  /// TODO: QString section(const QRegularExpression& re, int start, int end, QString::SectionFlags flags) const;
  // QString left(int n) const;
  gonk::bind::member_function<QString, QString, int, &QString::left>(c, "left").create();
  // QString right(int n) const;
  gonk::bind::member_function<QString, QString, int, &QString::right>(c, "right").create();
  // QString mid(int position, int n) const;
  gonk::bind::member_function<QString, QString, int, int, &QString::mid>(c, "mid").create();
  // QString chopped(int n) const;
  gonk::bind::member_function<QString, QString, int, &QString::chopped>(c, "chopped").create();
  // QStringRef leftRef(int n) const;
  gonk::bind::member_function<QString, QStringRef, int, &QString::leftRef>(c, "leftRef").create();
  // QStringRef rightRef(int n) const;
  gonk::bind::member_function<QString, QStringRef, int, &QString::rightRef>(c, "rightRef").create();
  // QStringRef midRef(int position, int n) const;
  gonk::bind::member_function<QString, QStringRef, int, int, &QString::midRef>(c, "midRef").create();
  // bool startsWith(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(const QString& s, Qt::CaseSensitivity cs) const;
  // bool startsWith(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  // bool endsWith(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(const QString& s, Qt::CaseSensitivity cs) const;
  // bool endsWith(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  // bool isUpper() const;
  gonk::bind::member_function<QString, bool, &QString::isUpper>(c, "isUpper").create();
  // bool isLower() const;
  gonk::bind::member_function<QString, bool, &QString::isLower>(c, "isLower").create();
  // QString leftJustified(0) const;
  /// TODO: QString leftJustified(0) const;
  // QString rightJustified(int width, QChar fill, bool truncate) const;
  gonk::bind::member_function<QString, QString, int, QChar, bool, &QString::rightJustified>(c, "rightJustified").create();
  // QString toLower() const;
  gonk::bind::fn_as_memfn<QString, QString, &QString_toLower>(c, "toLower").create();
  // QString toUpper() const;
  gonk::bind::fn_as_memfn<QString, QString, &QString_toUpper>(c, "toUpper").create();
  // QString toCaseFolded() const;
  gonk::bind::fn_as_memfn<QString, QString, &QString_toCaseFolded>(c, "toCaseFolded").create();
  // QString trimmed() const;
  gonk::bind::fn_as_memfn<QString, QString, &QString_trimmed>(c, "trimmed").create();
  // QString simplified() const;
  gonk::bind::fn_as_memfn<QString, QString, &QString_simplified>(c, "simplified").create();
  // QString toHtmlEscaped() const;
  gonk::bind::member_function<QString, QString, &QString::toHtmlEscaped>(c, "toHtmlEscaped").create();
  // QString& insert(int i, QChar c);
  gonk::bind::member_function<QString, QString&, int, QChar, &QString::insert>(c, "insert").create();
  // QString& insert(int i, const QChar* uc, int len);
  /// TODO: QString& insert(int i, const QChar* uc, int len);
  // QString& insert(int i, const QString& s);
  gonk::bind::member_function<QString, QString&, int, const QString&, &QString::insert>(c, "insert").create();
  // QString& insert(int i, const QStringRef& s);
  gonk::bind::member_function<QString, QString&, int, const QStringRef&, &QString::insert>(c, "insert").create();
  // QString& insert(int i, QLatin1String s);
  gonk::bind::member_function<QString, QString&, int, QLatin1String, &QString::insert>(c, "insert").create();
  // QString& append(QChar c);
  gonk::bind::member_function<QString, QString&, QChar, &QString::append>(c, "append").create();
  // QString& append(const QChar* uc, int len);
  /// TODO: QString& append(const QChar* uc, int len);
  // QString& append(const QString& s);
  gonk::bind::member_function<QString, QString&, const QString&, &QString::append>(c, "append").create();
  // QString& append(const QStringRef& s);
  gonk::bind::member_function<QString, QString&, const QStringRef&, &QString::append>(c, "append").create();
  // QString& append(QLatin1String s);
  gonk::bind::member_function<QString, QString&, QLatin1String, &QString::append>(c, "append").create();
  // QString& prepend(QChar c);
  gonk::bind::member_function<QString, QString&, QChar, &QString::prepend>(c, "prepend").create();
  // QString& prepend(const QChar* uc, int len);
  /// TODO: QString& prepend(const QChar* uc, int len);
  // QString& prepend(const QString& s);
  gonk::bind::member_function<QString, QString&, const QString&, &QString::prepend>(c, "prepend").create();
  // QString& prepend(const QStringRef& s);
  gonk::bind::member_function<QString, QString&, const QStringRef&, &QString::prepend>(c, "prepend").create();
  // QString& prepend(QLatin1String s);
  gonk::bind::member_function<QString, QString&, QLatin1String, &QString::prepend>(c, "prepend").create();
  // QString& operator+=(QChar c);
  gonk::bind::memop_add_assign<QString, QChar>(c);
  // QString& operator+=(QChar::SpecialCharacter c);
  gonk::bind::memop_add_assign<QString, QChar::SpecialCharacter>(c);
  // QString& operator+=(const QString& s);
  gonk::bind::memop_add_assign<QString, const QString&>(c);
  // QString& operator+=(const QStringRef& s);
  gonk::bind::memop_add_assign<QString, const QStringRef&>(c);
  // QString& operator+=(QLatin1String s);
  gonk::bind::memop_add_assign<QString, QLatin1String>(c);
  // QString& remove(int i, int len);
  gonk::bind::member_function<QString, QString&, int, int, &QString::remove>(c, "remove").create();
  // QString& remove(QChar c, Qt::CaseSensitivity cs);
  /// TODO: QString& remove(QChar c, Qt::CaseSensitivity cs);
  // QString& remove(QLatin1String s, Qt::CaseSensitivity cs);
  /// TODO: QString& remove(QLatin1String s, Qt::CaseSensitivity cs);
  // QString& remove(const QString& s, Qt::CaseSensitivity cs);
  /// TODO: QString& remove(const QString& s, Qt::CaseSensitivity cs);
  // QString& replace(int i, int len, QChar after);
  gonk::bind::member_function<QString, QString&, int, int, QChar, &QString::replace>(c, "replace").create();
  // QString& replace(int i, int len, const QChar* s, int slen);
  /// TODO: QString& replace(int i, int len, const QChar* s, int slen);
  // QString& replace(int i, int len, const QString& after);
  gonk::bind::member_function<QString, QString&, int, int, const QString&, &QString::replace>(c, "replace").create();
  // QString& replace(QChar before, QChar after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(QChar before, QChar after, Qt::CaseSensitivity cs);
  // QString& replace(const QChar* before, int blen, const QChar* after, int alen, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(const QChar* before, int blen, const QChar* after, int alen, Qt::CaseSensitivity cs);
  // QString& replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs);
  // QString& replace(QLatin1String before, const QString& after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(QLatin1String before, const QString& after, Qt::CaseSensitivity cs);
  // QString& replace(const QString& before, QLatin1String after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(const QString& before, QLatin1String after, Qt::CaseSensitivity cs);
  // QString& replace(const QString& before, const QString& after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(const QString& before, const QString& after, Qt::CaseSensitivity cs);
  // QString& replace(QChar c, const QString& after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(QChar c, const QString& after, Qt::CaseSensitivity cs);
  // QString& replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs);
  /// TODO: QString& replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs);
  // QString& replace(const QRegExp& rx, const QString& after);
  /// TODO: QString& replace(const QRegExp& rx, const QString& after);
  // QString& remove(const QRegExp& rx);
  /// TODO: QString& remove(const QRegExp& rx);
  // QString& replace(const QRegularExpression& re, const QString& after);
  /// TODO: QString& replace(const QRegularExpression& re, const QString& after);
  // QString& remove(const QRegularExpression& re);
  /// TODO: QString& remove(const QRegularExpression& re);
  // QStringList split(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QStringList split(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> splitRef(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> splitRef(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QStringList split(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QStringList split(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> splitRef(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> splitRef(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QStringList split(const QRegExp& sep, QString::SplitBehavior behavior) const;
  /// TODO: QStringList split(const QRegExp& sep, QString::SplitBehavior behavior) const;
  // QVector<QStringRef> splitRef(const QRegExp& sep, QString::SplitBehavior behavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegExp& sep, QString::SplitBehavior behavior) const;
  // QStringList split(const QRegularExpression& sep, QString::SplitBehavior behavior) const;
  /// TODO: QStringList split(const QRegularExpression& sep, QString::SplitBehavior behavior) const;
  // QVector<QStringRef> splitRef(const QRegularExpression& sep, QString::SplitBehavior behavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegularExpression& sep, QString::SplitBehavior behavior) const;
  // QStringList split(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QStringList split(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> splitRef(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> splitRef(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QStringList split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QStringList split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> splitRef(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> splitRef(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QStringList split(const QRegExp& sep, Qt::SplitBehavior behavior) const;
  /// TODO: QStringList split(const QRegExp& sep, Qt::SplitBehavior behavior) const;
  // QVector<QStringRef> splitRef(const QRegExp& sep, Qt::SplitBehavior behavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegExp& sep, Qt::SplitBehavior behavior) const;
  // QStringList split(const QRegularExpression& sep, Qt::SplitBehavior behavior) const;
  /// TODO: QStringList split(const QRegularExpression& sep, Qt::SplitBehavior behavior) const;
  // QVector<QStringRef> splitRef(const QRegularExpression& sep, Qt::SplitBehavior behavior) const;
  /// TODO: QVector<QStringRef> splitRef(const QRegularExpression& sep, Qt::SplitBehavior behavior) const;
  // QString normalized(QString::NormalizationForm mode, QChar::UnicodeVersion version) const;
  gonk::bind::member_function<QString, QString, QString::NormalizationForm, QChar::UnicodeVersion, &QString::normalized>(c, "normalized").create();
  // QString repeated(int times) const;
  gonk::bind::member_function<QString, QString, int, &QString::repeated>(c, "repeated").create();
  // const ushort* utf16() const;
  /// TODO: const ushort* utf16() const;
  // QByteArray toLatin1() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &QString_toLatin1>(c, "toLatin1").create();
  // QByteArray toUtf8() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &QString_toUtf8>(c, "toUtf8").create();
  // QByteArray toLocal8Bit() const;
  gonk::bind::fn_as_memfn<QString, QByteArray, &QString_toLocal8Bit>(c, "toLocal8Bit").create();
  // QVector<uint> toUcs4() const;
  /// TODO: QVector<uint> toUcs4() const;
  // static QString fromLatin1(const char* str, int size);
  /// TODO: static QString fromLatin1(const char* str, int size);
  // static QString fromUtf8(const char* str, int size);
  /// TODO: static QString fromUtf8(const char* str, int size);
  // static QString fromLocal8Bit(const char* str, int size);
  /// TODO: static QString fromLocal8Bit(const char* str, int size);
  // static QString fromLatin1(const QByteArray& str);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromLatin1>(c, "fromLatin1").create();
  // static QString fromUtf8(const QByteArray& str);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromUtf8>(c, "fromUtf8").create();
  // static QString fromLocal8Bit(const QByteArray& str);
  gonk::bind::static_member_function<QString, QString, const QByteArray&, &QString::fromLocal8Bit>(c, "fromLocal8Bit").create();
  // static QString fromUtf16(const ushort*, int size);
  /// TODO: static QString fromUtf16(const ushort*, int size);
  // static QString fromUcs4(const uint*, int size);
  /// TODO: static QString fromUcs4(const uint*, int size);
  // static QString fromRawData(const QChar*, int size);
  /// TODO: static QString fromRawData(const QChar*, int size);
  // static QString fromUtf16(const char16_t* str, int size);
  /// TODO: static QString fromUtf16(const char16_t* str, int size);
  // static QString fromUcs4(const char32_t* str, int size);
  /// TODO: static QString fromUcs4(const char32_t* str, int size);
  // int toWCharArray(wchar_t* array) const;
  /// TODO: int toWCharArray(wchar_t* array) const;
  // static QString fromWCharArray(const wchar_t* string, int size);
  /// TODO: static QString fromWCharArray(const wchar_t* string, int size);
  // QString& setRawData(const QChar* unicode, int size);
  /// TODO: QString& setRawData(const QChar* unicode, int size);
  // QString& setUnicode(const QChar* unicode, int size);
  /// TODO: QString& setUnicode(const QChar* unicode, int size);
  // QString& setUtf16(const ushort* utf16, int size);
  /// TODO: QString& setUtf16(const ushort* utf16, int size);
  // int compare(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(const QString& s, Qt::CaseSensitivity cs) const;
  // int compare(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // int compare(QLatin1String other, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QLatin1String other, Qt::CaseSensitivity cs) const;
  // int compare(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QStringView s, Qt::CaseSensitivity cs) const;
  // int compare(QChar ch, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QChar ch, Qt::CaseSensitivity cs) const;
  // static int compare(const QString& s1, const QString& s2, Qt::CaseSensitivity cs);
  /// TODO: static int compare(const QString& s1, const QString& s2, Qt::CaseSensitivity cs);
  // static int compare(const QString& s1, QLatin1String s2, Qt::CaseSensitivity cs);
  /// TODO: static int compare(const QString& s1, QLatin1String s2, Qt::CaseSensitivity cs);
  // static int compare(QLatin1String s1, const QString& s2, Qt::CaseSensitivity cs);
  /// TODO: static int compare(QLatin1String s1, const QString& s2, Qt::CaseSensitivity cs);
  // static int compare(const QString& s1, const QStringRef& s2, Qt::CaseSensitivity);
  /// TODO: static int compare(const QString& s1, const QStringRef& s2, Qt::CaseSensitivity);
  // int localeAwareCompare(const QString& s) const;
  gonk::bind::member_function<QString, int, const QString&, &QString::localeAwareCompare>(c, "localeAwareCompare").create();
  // static int localeAwareCompare(const QString& s1, const QString& s2);
  gonk::bind::static_member_function<QString, int, const QString&, const QString&, &QString::localeAwareCompare>(c, "localeAwareCompare").create();
  // int localeAwareCompare(const QStringRef& s) const;
  gonk::bind::member_function<QString, int, const QStringRef&, &QString::localeAwareCompare>(c, "localeAwareCompare").create();
  // static int localeAwareCompare(const QString& s1, const QStringRef& s2);
  gonk::bind::static_member_function<QString, int, const QString&, const QStringRef&, &QString::localeAwareCompare>(c, "localeAwareCompare").create();
  // short toShort(bool* ok, int base) const;
  /// TODO: short toShort(bool* ok, int base) const;
  // ushort toUShort(bool* ok, int base) const;
  /// TODO: ushort toUShort(bool* ok, int base) const;
  // int toInt(bool* ok, int base) const;
  /// TODO: int toInt(bool* ok, int base) const;
  // uint toUInt(bool* ok, int base) const;
  /// TODO: uint toUInt(bool* ok, int base) const;
  // long toLong(bool* ok, int base) const;
  /// TODO: long toLong(bool* ok, int base) const;
  // ulong toULong(bool* ok, int base) const;
  /// TODO: ulong toULong(bool* ok, int base) const;
  // qlonglong toLongLong(bool* ok, int base) const;
  /// TODO: qlonglong toLongLong(bool* ok, int base) const;
  // qulonglong toULongLong(bool* ok, int base) const;
  /// TODO: qulonglong toULongLong(bool* ok, int base) const;
  // float toFloat(bool* ok) const;
  /// TODO: float toFloat(bool* ok) const;
  // double toDouble(bool* ok) const;
  /// TODO: double toDouble(bool* ok) const;
  // QString& setNum(short, int base);
  /// TODO: QString& setNum(short, int base);
  // QString& setNum(ushort, int base);
  /// TODO: QString& setNum(ushort, int base);
  // QString& setNum(int, int base);
  gonk::bind::member_function<QString, QString&, int, int, &QString::setNum>(c, "setNum").create();
  // QString& setNum(uint, int base);
  /// TODO: QString& setNum(uint, int base);
  // QString& setNum(long, int base);
  /// TODO: QString& setNum(long, int base);
  // QString& setNum(ulong, int base);
  /// TODO: QString& setNum(ulong, int base);
  // QString& setNum(qlonglong, int base);
  /// TODO: QString& setNum(qlonglong, int base);
  // QString& setNum(qulonglong, int base);
  /// TODO: QString& setNum(qulonglong, int base);
  // QString& setNum(0);
  /// TODO: QString& setNum(0);
  // QString& setNum(0);
  /// TODO: QString& setNum(0);
  // static QString number(int, int base);
  gonk::bind::static_member_function<QString, QString, int, int, &QString::number>(c, "number").create();
  // static QString number(uint, int base);
  /// TODO: static QString number(uint, int base);
  // static QString number(long, int base);
  /// TODO: static QString number(long, int base);
  // static QString number(ulong, int base);
  /// TODO: static QString number(ulong, int base);
  // static QString number(qlonglong, int base);
  /// TODO: static QString number(qlonglong, int base);
  // static QString number(qulonglong, int base);
  /// TODO: static QString number(qulonglong, int base);
  // static QString number(0);
  /// TODO: static QString number(0);
  // bool operator==(QLatin1String s) const;
  gonk::bind::memop_eq<QString, QLatin1String>(c);
  // bool operator<(QLatin1String s) const;
  gonk::bind::memop_less<QString, QLatin1String>(c);
  // bool operator>(QLatin1String s) const;
  gonk::bind::memop_greater<QString, QLatin1String>(c);
  // bool operator!=(QLatin1String s) const;
  gonk::bind::memop_neq<QString, QLatin1String>(c);
  // bool operator<=(QLatin1String s) const;
  gonk::bind::memop_leq<QString, QLatin1String>(c);
  // bool operator>=(QLatin1String s) const;
  gonk::bind::memop_geq<QString, QLatin1String>(c);
  // QString(const char* ch);
  /// TODO: QString(const char* ch);
  // QString(const QByteArray& a);
  gonk::bind::constructor<QString, const QByteArray&>(c).create();
  // QString& operator=(const char* ch);
  /// TODO: QString& operator=(const char* ch);
  // QString& operator=(const QByteArray& a);
  gonk::bind::memop_assign<QString, const QByteArray&>(c);
  // QString& operator=(char c);
  gonk::bind::memop_assign<QString, char>(c);
  // QString& prepend(const char* s);
  /// TODO: QString& prepend(const char* s);
  // QString& prepend(const QByteArray& s);
  gonk::bind::member_function<QString, QString&, const QByteArray&, &QString::prepend>(c, "prepend").create();
  // QString& append(const char* s);
  /// TODO: QString& append(const char* s);
  // QString& append(const QByteArray& s);
  gonk::bind::member_function<QString, QString&, const QByteArray&, &QString::append>(c, "append").create();
  // QString& insert(int i, const char* s);
  /// TODO: QString& insert(int i, const char* s);
  // QString& insert(int i, const QByteArray& s);
  gonk::bind::member_function<QString, QString&, int, const QByteArray&, &QString::insert>(c, "insert").create();
  // QString& operator+=(const char* s);
  /// TODO: QString& operator+=(const char* s);
  // QString& operator+=(const QByteArray& s);
  gonk::bind::memop_add_assign<QString, const QByteArray&>(c);
  // QString& operator+=(char c);
  gonk::bind::memop_add_assign<QString, char>(c);
  // bool operator==(const char* s) const;
  /// TODO: bool operator==(const char* s) const;
  // bool operator!=(const char* s) const;
  /// TODO: bool operator!=(const char* s) const;
  // bool operator<(const char* s) const;
  /// TODO: bool operator<(const char* s) const;
  // bool operator<=(const char* s) const;
  /// TODO: bool operator<=(const char* s) const;
  // bool operator>(const char* s) const;
  /// TODO: bool operator>(const char* s) const;
  // bool operator>=(const char* s) const;
  /// TODO: bool operator>=(const char* s) const;
  // bool operator==(const QByteArray& s) const;
  gonk::bind::memop_eq<QString, const QByteArray&>(c);
  // bool operator!=(const QByteArray& s) const;
  gonk::bind::memop_neq<QString, const QByteArray&>(c);
  // bool operator<(const QByteArray& s) const;
  gonk::bind::memop_less<QString, const QByteArray&>(c);
  // bool operator>(const QByteArray& s) const;
  gonk::bind::memop_greater<QString, const QByteArray&>(c);
  // bool operator<=(const QByteArray& s) const;
  gonk::bind::memop_leq<QString, const QByteArray&>(c);
  // bool operator>=(const QByteArray& s) const;
  gonk::bind::memop_geq<QString, const QByteArray&>(c);
  // QString::iterator begin();
  /// TODO: QString::iterator begin();
  // QString::const_iterator begin() const;
  /// TODO: QString::const_iterator begin() const;
  // QString::const_iterator cbegin() const;
  /// TODO: QString::const_iterator cbegin() const;
  // QString::const_iterator constBegin() const;
  /// TODO: QString::const_iterator constBegin() const;
  // QString::iterator end();
  /// TODO: QString::iterator end();
  // QString::const_iterator end() const;
  /// TODO: QString::const_iterator end() const;
  // QString::const_iterator cend() const;
  /// TODO: QString::const_iterator cend() const;
  // QString::const_iterator constEnd() const;
  /// TODO: QString::const_iterator constEnd() const;
  // QString::reverse_iterator rbegin();
  /// TODO: QString::reverse_iterator rbegin();
  // QString::reverse_iterator rend();
  /// TODO: QString::reverse_iterator rend();
  // QString::const_reverse_iterator rbegin() const;
  /// TODO: QString::const_reverse_iterator rbegin() const;
  // QString::const_reverse_iterator rend() const;
  /// TODO: QString::const_reverse_iterator rend() const;
  // QString::const_reverse_iterator crbegin() const;
  /// TODO: QString::const_reverse_iterator crbegin() const;
  // QString::const_reverse_iterator crend() const;
  /// TODO: QString::const_reverse_iterator crend() const;
  // void push_back(QChar c);
  gonk::bind::void_member_function<QString, QChar, &QString::push_back>(c, "push_back").create();
  // void push_back(const QString& s);
  gonk::bind::void_member_function<QString, const QString&, &QString::push_back>(c, "push_back").create();
  // void push_front(QChar c);
  gonk::bind::void_member_function<QString, QChar, &QString::push_front>(c, "push_front").create();
  // void push_front(const QString& s);
  gonk::bind::void_member_function<QString, const QString&, &QString::push_front>(c, "push_front").create();
  // void shrink_to_fit();
  gonk::bind::void_member_function<QString, &QString::shrink_to_fit>(c, "shrink_to_fit").create();
  // static QString fromStdString(const std::string& s);
  gonk::bind::static_member_function<QString, QString, const std::string&, &QString::fromStdString>(c, "fromStdString").create();
  // std::string toStdString() const;
  gonk::bind::member_function<QString, std::string, &QString::toStdString>(c, "toStdString").create();
  // static QString fromStdWString(const std::wstring& s);
  /// TODO: static QString fromStdWString(const std::wstring& s);
  // std::wstring toStdWString() const;
  /// TODO: std::wstring toStdWString() const;
  // static QString fromStdU16String(const std::u16string& s);
  /// TODO: static QString fromStdU16String(const std::u16string& s);
  // std::u16string toStdU16String() const;
  /// TODO: std::u16string toStdU16String() const;
  // static QString fromStdU32String(const std::u32string& s);
  /// TODO: static QString fromStdU32String(const std::u32string& s);
  // std::u32string toStdU32String() const;
  /// TODO: std::u32string toStdU32String() const;
  // QString(const QString::Null&);
  gonk::bind::constructor<QString, const QString::Null&>(c).create();
  // QString& operator=(const QString::Null&);
  gonk::bind::memop_assign<QString, const QString::Null&>(c);
  // bool isNull() const;
  gonk::bind::member_function<QString, bool, &QString::isNull>(c, "isNull").create();
  // bool isSimpleText() const;
  gonk::bind::member_function<QString, bool, &QString::isSimpleText>(c, "isSimpleText").create();
  // bool isRightToLeft() const;
  gonk::bind::member_function<QString, bool, &QString::isRightToLeft>(c, "isRightToLeft").create();
  // bool isValidUtf16() const;
  gonk::bind::member_function<QString, bool, &QString::isValidUtf16>(c, "isValidUtf16").create();
  // QString(int size, Qt::Initialization);
  /// TODO: QString(int size, Qt::Initialization);
}

static void register_char_ref(script::Namespace& parent)
{
  using namespace script;
  
  Class char_ref = parent.newClass("QCharRef").setId(script::Type::make<QCharRef>().data())
    .get();

  Class& c = char_ref;
  

  // QCharRef& operator=(QChar c);
  gonk::bind::memop_assign<QCharRef, QChar>(c);
  // QCharRef& operator=(char c);
  gonk::bind::memop_assign<QCharRef, char>(c);
  // QCharRef& operator=(uchar c);
  /// TODO: QCharRef& operator=(uchar c);
  // QCharRef& operator=(const QCharRef& c);
  gonk::bind::memop_assign<QCharRef, const QCharRef&>(c);
  // QCharRef& operator=(ushort rc);
  /// TODO: QCharRef& operator=(ushort rc);
  // QCharRef& operator=(short rc);
  /// TODO: QCharRef& operator=(short rc);
  // QCharRef& operator=(uint rc);
  /// TODO: QCharRef& operator=(uint rc);
  // QCharRef& operator=(int rc);
  gonk::bind::memop_assign<QCharRef, int>(c);
  // bool isNull() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isNull>(c, "isNull").create();
  // bool isPrint() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isPrint>(c, "isPrint").create();
  // bool isPunct() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isPunct>(c, "isPunct").create();
  // bool isSpace() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isSpace>(c, "isSpace").create();
  // bool isMark() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isMark>(c, "isMark").create();
  // bool isLetter() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLetter>(c, "isLetter").create();
  // bool isNumber() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isNumber>(c, "isNumber").create();
  // bool isLetterOrNumber();
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLetterOrNumber>(c, "isLetterOrNumber").create();
  // bool isDigit() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isDigit>(c, "isDigit").create();
  // bool isLower() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isLower>(c, "isLower").create();
  // bool isUpper() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isUpper>(c, "isUpper").create();
  // bool isTitleCase() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::isTitleCase>(c, "isTitleCase").create();
  // int digitValue() const;
  gonk::bind::member_function<QCharRef, int, &QCharRef::digitValue>(c, "digitValue").create();
  // QChar toLower() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toLower>(c, "toLower").create();
  // QChar toUpper() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toUpper>(c, "toUpper").create();
  // QChar toTitleCase() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::toTitleCase>(c, "toTitleCase").create();
  // QChar::Category category() const;
  gonk::bind::member_function<QCharRef, QChar::Category, &QCharRef::category>(c, "category").create();
  // QChar::Direction direction() const;
  gonk::bind::member_function<QCharRef, QChar::Direction, &QCharRef::direction>(c, "direction").create();
  // QChar::JoiningType joiningType() const;
  gonk::bind::member_function<QCharRef, QChar::JoiningType, &QCharRef::joiningType>(c, "joiningType").create();
  // QChar::Joining joining() const;
  gonk::bind::member_function<QCharRef, QChar::Joining, &QCharRef::joining>(c, "joining").create();
  // bool hasMirrored() const;
  gonk::bind::member_function<QCharRef, bool, &QCharRef::hasMirrored>(c, "hasMirrored").create();
  // QChar mirroredChar() const;
  gonk::bind::member_function<QCharRef, QChar, &QCharRef::mirroredChar>(c, "mirroredChar").create();
  // QString decomposition() const;
  gonk::bind::member_function<QCharRef, QString, &QCharRef::decomposition>(c, "decomposition").create();
  // QChar::Decomposition decompositionTag() const;
  gonk::bind::member_function<QCharRef, QChar::Decomposition, &QCharRef::decompositionTag>(c, "decompositionTag").create();
  // uchar combiningClass() const;
  /// TODO: uchar combiningClass() const;
  // QChar::Script script() const;
  gonk::bind::member_function<QCharRef, QChar::Script, &QCharRef::script>(c, "script").create();
  // QChar::UnicodeVersion unicodeVersion() const;
  gonk::bind::member_function<QCharRef, QChar::UnicodeVersion, &QCharRef::unicodeVersion>(c, "unicodeVersion").create();
  // uchar cell() const;
  /// TODO: uchar cell() const;
  // uchar row() const;
  /// TODO: uchar row() const;
  // void setCell(uchar cell);
  /// TODO: void setCell(uchar cell);
  // void setRow(uchar row);
  /// TODO: void setRow(uchar row);
  // char toLatin1() const;
  gonk::bind::member_function<QCharRef, char, &QCharRef::toLatin1>(c, "toLatin1").create();
  // ushort unicode() const;
  /// TODO: ushort unicode() const;
  // ushort& unicode();
  /// TODO: ushort& unicode();
}

static void register_string_ref(script::Namespace& parent)
{
  using namespace script;
  
  Class string_ref = parent.newClass("QStringRef").setId(script::Type::make<QStringRef>().data())
    .get();

  Class& c = string_ref;
  

  // QStringRef();
  gonk::bind::default_constructor<QStringRef>(c).create();
  // QStringRef(const QString* string, int position, int size);
  /// TODO: QStringRef(const QString* string, int position, int size);
  // QStringRef(const QString* string);
  /// TODO: QStringRef(const QString* string);
  // QStringRef(const QStringRef& other);
  gonk::bind::constructor<QStringRef, const QStringRef&>(c).create();
  // QStringRef(QStringRef&& other);
  gonk::bind::constructor<QStringRef, QStringRef&&>(c).create();
  // QStringRef& operator=(QStringRef&& other);
  gonk::bind::memop_assign<QStringRef, QStringRef&&>(c);
  // QStringRef& operator=(const QStringRef& other);
  gonk::bind::memop_assign<QStringRef, const QStringRef&>(c);
  // ~QStringRef();
  gonk::bind::destructor<QStringRef>(c).create();
  // const QString* string() const;
  /// TODO: const QString* string() const;
  // int position() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::position>(c, "position").create();
  // int size() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::size>(c, "size").create();
  // int count() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::count>(c, "count").create();
  // int length() const;
  gonk::bind::member_function<QStringRef, int, &QStringRef::length>(c, "length").create();
  // int indexOf(const QString& str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(const QString& str, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(const QStringRef& str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(const QStringRef& str, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QChar ch, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QChar ch, int from, Qt::CaseSensitivity cs) const;
  // int indexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int indexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(const QStringRef& str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(const QStringRef& str, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(const QString& str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(const QString& str, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QChar ch, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QChar ch, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QLatin1String str, int from, Qt::CaseSensitivity cs) const;
  // int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  /// TODO: int lastIndexOf(QStringView s, int from, Qt::CaseSensitivity cs) const;
  // bool contains(const QString& str, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(const QString& str, Qt::CaseSensitivity cs) const;
  // bool contains(const QStringRef& str, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(const QStringRef& str, Qt::CaseSensitivity cs) const;
  // bool contains(QChar ch, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QChar ch, Qt::CaseSensitivity cs) const;
  // bool contains(QLatin1String str, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QLatin1String str, Qt::CaseSensitivity cs) const;
  // bool contains(QStringView str, Qt::CaseSensitivity cs) const;
  /// TODO: bool contains(QStringView str, Qt::CaseSensitivity cs) const;
  // int count(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: int count(const QString& s, Qt::CaseSensitivity cs) const;
  // int count(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: int count(QChar c, Qt::CaseSensitivity cs) const;
  // int count(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: int count(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> split(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> split(const QString& sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> split(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> split(QChar sep, QString::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> split(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> split(const QString& sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QVector<QStringRef> split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  /// TODO: QVector<QStringRef> split(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const;
  // QStringRef left(int n) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::left>(c, "left").create();
  // QStringRef right(int n) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::right>(c, "right").create();
  // QStringRef mid(int pos, int n) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, int, &QStringRef::mid>(c, "mid").create();
  // QStringRef chopped(int n) const;
  gonk::bind::member_function<QStringRef, QStringRef, int, &QStringRef::chopped>(c, "chopped").create();
  // void truncate(int pos);
  gonk::bind::void_member_function<QStringRef, int, &QStringRef::truncate>(c, "truncate").create();
  // void chop(int n);
  gonk::bind::void_member_function<QStringRef, int, &QStringRef::chop>(c, "chop").create();
  // bool isRightToLeft() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isRightToLeft>(c, "isRightToLeft").create();
  // bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(QChar c, Qt::CaseSensitivity cs) const;
  // bool startsWith(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(const QString& s, Qt::CaseSensitivity cs) const;
  // bool startsWith(const QStringRef& c, Qt::CaseSensitivity cs) const;
  /// TODO: bool startsWith(const QStringRef& c, Qt::CaseSensitivity cs) const;
  // bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QStringView s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QLatin1String s, Qt::CaseSensitivity cs) const;
  // bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(QChar c, Qt::CaseSensitivity cs) const;
  // bool endsWith(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(const QString& s, Qt::CaseSensitivity cs) const;
  // bool endsWith(const QStringRef& c, Qt::CaseSensitivity cs) const;
  /// TODO: bool endsWith(const QStringRef& c, Qt::CaseSensitivity cs) const;
  // QStringRef& operator=(const QString* string);
  /// TODO: QStringRef& operator=(const QString* string);
  // const QChar* unicode() const;
  /// TODO: const QChar* unicode() const;
  // const QChar* data() const;
  /// TODO: const QChar* data() const;
  // const QChar* constData() const;
  /// TODO: const QChar* constData() const;
  // QStringRef::const_iterator begin() const;
  /// TODO: QStringRef::const_iterator begin() const;
  // QStringRef::const_iterator cbegin() const;
  /// TODO: QStringRef::const_iterator cbegin() const;
  // QStringRef::const_iterator constBegin() const;
  /// TODO: QStringRef::const_iterator constBegin() const;
  // QStringRef::const_iterator end() const;
  /// TODO: QStringRef::const_iterator end() const;
  // QStringRef::const_iterator cend() const;
  /// TODO: QStringRef::const_iterator cend() const;
  // QStringRef::const_iterator constEnd() const;
  /// TODO: QStringRef::const_iterator constEnd() const;
  // QStringRef::const_reverse_iterator rbegin() const;
  /// TODO: QStringRef::const_reverse_iterator rbegin() const;
  // QStringRef::const_reverse_iterator crbegin() const;
  /// TODO: QStringRef::const_reverse_iterator crbegin() const;
  // QStringRef::const_reverse_iterator rend() const;
  /// TODO: QStringRef::const_reverse_iterator rend() const;
  // QStringRef::const_reverse_iterator crend() const;
  /// TODO: QStringRef::const_reverse_iterator crend() const;
  // QByteArray toLatin1() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toLatin1>(c, "toLatin1").create();
  // QByteArray toUtf8() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toUtf8>(c, "toUtf8").create();
  // QByteArray toLocal8Bit() const;
  gonk::bind::member_function<QStringRef, QByteArray, &QStringRef::toLocal8Bit>(c, "toLocal8Bit").create();
  // QVector<uint> toUcs4() const;
  /// TODO: QVector<uint> toUcs4() const;
  // void clear();
  gonk::bind::void_member_function<QStringRef, &QStringRef::clear>(c, "clear").create();
  // QString toString() const;
  gonk::bind::member_function<QStringRef, QString, &QStringRef::toString>(c, "toString").create();
  // bool isEmpty() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isEmpty>(c, "isEmpty").create();
  // bool isNull() const;
  gonk::bind::member_function<QStringRef, bool, &QStringRef::isNull>(c, "isNull").create();
  // QStringRef appendTo(QString* string) const;
  /// TODO: QStringRef appendTo(QString* string) const;
  // const QChar at(int i) const;
  gonk::bind::member_function<QStringRef, const QChar, int, &QStringRef::at>(c, "at").create();
  // QChar operator[](int i) const;
  gonk::bind::memop_const_subscript<QStringRef, QChar, int>(c);
  // QChar front() const;
  gonk::bind::member_function<QStringRef, QChar, &QStringRef::front>(c, "front").create();
  // QChar back() const;
  gonk::bind::member_function<QStringRef, QChar, &QStringRef::back>(c, "back").create();
  // bool operator==(const char* s) const;
  /// TODO: bool operator==(const char* s) const;
  // bool operator!=(const char* s) const;
  /// TODO: bool operator!=(const char* s) const;
  // bool operator<(const char* s) const;
  /// TODO: bool operator<(const char* s) const;
  // bool operator<=(const char* s) const;
  /// TODO: bool operator<=(const char* s) const;
  // bool operator>(const char* s) const;
  /// TODO: bool operator>(const char* s) const;
  // bool operator>=(const char* s) const;
  /// TODO: bool operator>=(const char* s) const;
  // int compare(const QString& s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(const QString& s, Qt::CaseSensitivity cs) const;
  // int compare(const QStringRef& s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(const QStringRef& s, Qt::CaseSensitivity cs) const;
  // int compare(QChar c, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QChar c, Qt::CaseSensitivity cs) const;
  // int compare(QLatin1String s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(QLatin1String s, Qt::CaseSensitivity cs) const;
  // int compare(const QByteArray& s, Qt::CaseSensitivity cs) const;
  /// TODO: int compare(const QByteArray& s, Qt::CaseSensitivity cs) const;
  // static int compare(const QStringRef& s1, const QString& s2, Qt::CaseSensitivity);
  /// TODO: static int compare(const QStringRef& s1, const QString& s2, Qt::CaseSensitivity);
  // static int compare(const QStringRef& s1, const QStringRef& s2, Qt::CaseSensitivity);
  /// TODO: static int compare(const QStringRef& s1, const QStringRef& s2, Qt::CaseSensitivity);
  // static int compare(const QStringRef& s1, QLatin1String s2, Qt::CaseSensitivity cs);
  /// TODO: static int compare(const QStringRef& s1, QLatin1String s2, Qt::CaseSensitivity cs);
  // int localeAwareCompare(const QString& s) const;
  gonk::bind::member_function<QStringRef, int, const QString&, &QStringRef::localeAwareCompare>(c, "localeAwareCompare").create();
  // int localeAwareCompare(const QStringRef& s) const;
  gonk::bind::member_function<QStringRef, int, const QStringRef&, &QStringRef::localeAwareCompare>(c, "localeAwareCompare").create();
  // static int localeAwareCompare(const QStringRef& s1, const QString& s2);
  gonk::bind::static_member_function<QStringRef, int, const QStringRef&, const QString&, &QStringRef::localeAwareCompare>(c, "localeAwareCompare").create();
  // static int localeAwareCompare(const QStringRef& s1, const QStringRef& s2);
  gonk::bind::static_member_function<QStringRef, int, const QStringRef&, const QStringRef&, &QStringRef::localeAwareCompare>(c, "localeAwareCompare").create();
  // QStringRef trimmed() const;
  gonk::bind::member_function<QStringRef, QStringRef, &QStringRef::trimmed>(c, "trimmed").create();
  // short toShort(bool* ok, int base) const;
  /// TODO: short toShort(bool* ok, int base) const;
  // ushort toUShort(bool* ok, int base) const;
  /// TODO: ushort toUShort(bool* ok, int base) const;
  // int toInt(bool* ok, int base) const;
  /// TODO: int toInt(bool* ok, int base) const;
  // uint toUInt(bool* ok, int base) const;
  /// TODO: uint toUInt(bool* ok, int base) const;
  // long toLong(bool* ok, int base) const;
  /// TODO: long toLong(bool* ok, int base) const;
  // ulong toULong(bool* ok, int base) const;
  /// TODO: ulong toULong(bool* ok, int base) const;
  // qlonglong toLongLong(bool* ok, int base) const;
  /// TODO: qlonglong toLongLong(bool* ok, int base) const;
  // qulonglong toULongLong(bool* ok, int base) const;
  /// TODO: qulonglong toULongLong(bool* ok, int base) const;
  // float toFloat(bool* ok) const;
  /// TODO: float toFloat(bool* ok) const;
  // double toDouble(bool* ok) const;
  /// TODO: double toDouble(bool* ok) const;
}
#endif // METAGONK_SOURCE

void register_string_file(script::Namespace ns)
{
  using namespace script;


  register_latin1_string(ns);
  register_string(ns);
  register_char_ref(ns);
  register_string_ref(ns);

  // bool operator==(QString::Null, QString::Null);
  gonk::bind::op_eq<QString::Null, QString::Null>(ns);
  // bool operator==(QString::Null, const QString&);
  gonk::bind::op_eq<QString::Null, const QString&>(ns);
  // bool operator==(const QString&, QString::Null);
  gonk::bind::op_eq<const QString&, QString::Null>(ns);
  // bool operator!=(QString::Null, QString::Null);
  gonk::bind::op_neq<QString::Null, QString::Null>(ns);
  // bool operator!=(QString::Null, const QString&);
  gonk::bind::op_neq<QString::Null, const QString&>(ns);
  // bool operator!=(const QString&, QString::Null);
  gonk::bind::op_neq<const QString&, QString::Null>(ns);
  // bool operator==(QLatin1String, QLatin1String);
  gonk::bind::op_eq<QLatin1String, QLatin1String>(ns);
  // bool operator!=(QLatin1String, QLatin1String);
  gonk::bind::op_neq<QLatin1String, QLatin1String>(ns);
  // bool operator<(QLatin1String, QLatin1String);
  gonk::bind::op_less<QLatin1String, QLatin1String>(ns);
  // bool operator>(QLatin1String, QLatin1String);
  gonk::bind::op_greater<QLatin1String, QLatin1String>(ns);
  // bool operator<=(QLatin1String, QLatin1String);
  gonk::bind::op_leq<QLatin1String, QLatin1String>(ns);
  // bool operator>=(QLatin1String, QLatin1String);
  gonk::bind::op_geq<QLatin1String, QLatin1String>(ns);
  // bool operator==(const char*, const QString&);
  /// TODO: bool operator==(const char*, const QString&);
  // bool operator!=(const char*, const QString&);
  /// TODO: bool operator!=(const char*, const QString&);
  // bool operator<(const char*, const QString&);
  /// TODO: bool operator<(const char*, const QString&);
  // bool operator>(const char*, const QString&);
  /// TODO: bool operator>(const char*, const QString&);
  // bool operator<=(const char*, const QString&);
  /// TODO: bool operator<=(const char*, const QString&);
  // bool operator>=(const char*, const QString&);
  /// TODO: bool operator>=(const char*, const QString&);
  // bool operator==(const char*, QLatin1String);
  /// TODO: bool operator==(const char*, QLatin1String);
  // bool operator!=(const char*, QLatin1String);
  /// TODO: bool operator!=(const char*, QLatin1String);
  // bool operator<(const char*, QLatin1String);
  /// TODO: bool operator<(const char*, QLatin1String);
  // bool operator>(const char*, QLatin1String);
  /// TODO: bool operator>(const char*, QLatin1String);
  // bool operator<=(const char*, QLatin1String);
  /// TODO: bool operator<=(const char*, QLatin1String);
  // bool operator>=(const char*, QLatin1String);
  /// TODO: bool operator>=(const char*, QLatin1String);
  // const QString operator+(const QString&, const QString&);
  gonk::bind::op_add<const QString, const QString&, const QString&>(ns);
  // const QString operator+(const QString&, QChar);
  gonk::bind::op_add<const QString, const QString&, QChar>(ns);
  // const QString operator+(QChar, const QString&);
  gonk::bind::op_add<const QString, QChar, const QString&>(ns);
  // const QString operator+(const QString&, const char*);
  /// TODO: const QString operator+(const QString&, const char*);
  // const QString operator+(const char*, const QString&);
  /// TODO: const QString operator+(const char*, const QString&);
  // const QString operator+(char, const QString&);
  gonk::bind::op_add<const QString, char, const QString&>(ns);
  // const QString operator+(const QString&, char);
  gonk::bind::op_add<const QString, const QString&, char>(ns);
  // const QString operator+(const QByteArray&, const QString&);
  gonk::bind::op_add<const QString, const QByteArray&, const QString&>(ns);
  // const QString operator+(const QString&, const QByteArray&);
  gonk::bind::op_add<const QString, const QString&, const QByteArray&>(ns);
  // QDataStream& operator<<(QDataStream&, const QString&);
  /// TODO: QDataStream& operator<<(QDataStream&, const QString&);
  // QDataStream& operator>>(QDataStream&, QString&);
  /// TODO: QDataStream& operator>>(QDataStream&, QString&);
  // void swap(QString&, QString&);
  gonk::bind::void_function<QString&, QString&, &swap>(ns, "swap").create();
  // QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QString::SectionFlags::enum_type);
  /// TODO: QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QString::SectionFlags::enum_type);
  // QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QFlags<QString::SectionFlags::enum_type>);
  /// TODO: QFlags<QString::SectionFlags::enum_type> operator|(QString::SectionFlags::enum_type, QFlags<QString::SectionFlags::enum_type>);
  // QIncompatibleFlag operator|(QString::SectionFlags::enum_type, int);
  /// TODO: QIncompatibleFlag operator|(QString::SectionFlags::enum_type, int);
  // bool operator==(const QStringRef&, const QStringRef&);
  gonk::bind::op_eq<const QStringRef&, const QStringRef&>(ns);
  // bool operator!=(const QStringRef&, const QStringRef&);
  gonk::bind::op_neq<const QStringRef&, const QStringRef&>(ns);
  // bool operator<(const QStringRef&, const QStringRef&);
  gonk::bind::op_less<const QStringRef&, const QStringRef&>(ns);
  // bool operator>(const QStringRef&, const QStringRef&);
  gonk::bind::op_greater<const QStringRef&, const QStringRef&>(ns);
  // bool operator<=(const QStringRef&, const QStringRef&);
  gonk::bind::op_leq<const QStringRef&, const QStringRef&>(ns);
  // bool operator>=(const QStringRef&, const QStringRef&);
  gonk::bind::op_geq<const QStringRef&, const QStringRef&>(ns);
  // bool operator==(const QString&, const QStringRef&);
  gonk::bind::op_eq<const QString&, const QStringRef&>(ns);
  // bool operator!=(const QString&, const QStringRef&);
  gonk::bind::op_neq<const QString&, const QStringRef&>(ns);
  // bool operator<(const QString&, const QStringRef&);
  gonk::bind::op_less<const QString&, const QStringRef&>(ns);
  // bool operator>(const QString&, const QStringRef&);
  gonk::bind::op_greater<const QString&, const QStringRef&>(ns);
  // bool operator<=(const QString&, const QStringRef&);
  gonk::bind::op_leq<const QString&, const QStringRef&>(ns);
  // bool operator>=(const QString&, const QStringRef&);
  gonk::bind::op_geq<const QString&, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, const QString&);
  gonk::bind::op_eq<const QStringRef&, const QString&>(ns);
  // bool operator!=(const QStringRef&, const QString&);
  gonk::bind::op_neq<const QStringRef&, const QString&>(ns);
  // bool operator<(const QStringRef&, const QString&);
  gonk::bind::op_less<const QStringRef&, const QString&>(ns);
  // bool operator>(const QStringRef&, const QString&);
  gonk::bind::op_greater<const QStringRef&, const QString&>(ns);
  // bool operator<=(const QStringRef&, const QString&);
  gonk::bind::op_leq<const QStringRef&, const QString&>(ns);
  // bool operator>=(const QStringRef&, const QString&);
  gonk::bind::op_geq<const QStringRef&, const QString&>(ns);
  // bool operator==(QLatin1String, const QStringRef&);
  gonk::bind::op_eq<QLatin1String, const QStringRef&>(ns);
  // bool operator!=(QLatin1String, const QStringRef&);
  gonk::bind::op_neq<QLatin1String, const QStringRef&>(ns);
  // bool operator<(QLatin1String, const QStringRef&);
  gonk::bind::op_less<QLatin1String, const QStringRef&>(ns);
  // bool operator>(QLatin1String, const QStringRef&);
  gonk::bind::op_greater<QLatin1String, const QStringRef&>(ns);
  // bool operator<=(QLatin1String, const QStringRef&);
  gonk::bind::op_leq<QLatin1String, const QStringRef&>(ns);
  // bool operator>=(QLatin1String, const QStringRef&);
  gonk::bind::op_geq<QLatin1String, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, QLatin1String);
  gonk::bind::op_eq<const QStringRef&, QLatin1String>(ns);
  // bool operator!=(const QStringRef&, QLatin1String);
  gonk::bind::op_neq<const QStringRef&, QLatin1String>(ns);
  // bool operator<(const QStringRef&, QLatin1String);
  gonk::bind::op_less<const QStringRef&, QLatin1String>(ns);
  // bool operator>(const QStringRef&, QLatin1String);
  gonk::bind::op_greater<const QStringRef&, QLatin1String>(ns);
  // bool operator<=(const QStringRef&, QLatin1String);
  gonk::bind::op_leq<const QStringRef&, QLatin1String>(ns);
  // bool operator>=(const QStringRef&, QLatin1String);
  gonk::bind::op_geq<const QStringRef&, QLatin1String>(ns);
  // bool operator==(QChar, const QString&);
  gonk::bind::op_eq<QChar, const QString&>(ns);
  // bool operator<(QChar, const QString&);
  gonk::bind::op_less<QChar, const QString&>(ns);
  // bool operator>(QChar, const QString&);
  gonk::bind::op_greater<QChar, const QString&>(ns);
  // bool operator!=(QChar, const QString&);
  gonk::bind::op_neq<QChar, const QString&>(ns);
  // bool operator<=(QChar, const QString&);
  gonk::bind::op_leq<QChar, const QString&>(ns);
  // bool operator>=(QChar, const QString&);
  gonk::bind::op_geq<QChar, const QString&>(ns);
  // bool operator==(const QString&, QChar);
  gonk::bind::op_eq<const QString&, QChar>(ns);
  // bool operator!=(const QString&, QChar);
  gonk::bind::op_neq<const QString&, QChar>(ns);
  // bool operator<(const QString&, QChar);
  gonk::bind::op_less<const QString&, QChar>(ns);
  // bool operator>(const QString&, QChar);
  gonk::bind::op_greater<const QString&, QChar>(ns);
  // bool operator<=(const QString&, QChar);
  gonk::bind::op_leq<const QString&, QChar>(ns);
  // bool operator>=(const QString&, QChar);
  gonk::bind::op_geq<const QString&, QChar>(ns);
  // bool operator==(QChar, const QStringRef&);
  gonk::bind::op_eq<QChar, const QStringRef&>(ns);
  // bool operator<(QChar, const QStringRef&);
  gonk::bind::op_less<QChar, const QStringRef&>(ns);
  // bool operator>(QChar, const QStringRef&);
  gonk::bind::op_greater<QChar, const QStringRef&>(ns);
  // bool operator!=(QChar, const QStringRef&);
  gonk::bind::op_neq<QChar, const QStringRef&>(ns);
  // bool operator<=(QChar, const QStringRef&);
  gonk::bind::op_leq<QChar, const QStringRef&>(ns);
  // bool operator>=(QChar, const QStringRef&);
  gonk::bind::op_geq<QChar, const QStringRef&>(ns);
  // bool operator==(const QStringRef&, QChar);
  gonk::bind::op_eq<const QStringRef&, QChar>(ns);
  // bool operator!=(const QStringRef&, QChar);
  gonk::bind::op_neq<const QStringRef&, QChar>(ns);
  // bool operator<(const QStringRef&, QChar);
  gonk::bind::op_less<const QStringRef&, QChar>(ns);
  // bool operator>(const QStringRef&, QChar);
  gonk::bind::op_greater<const QStringRef&, QChar>(ns);
  // bool operator<=(const QStringRef&, QChar);
  gonk::bind::op_leq<const QStringRef&, QChar>(ns);
  // bool operator>=(const QStringRef&, QChar);
  gonk::bind::op_geq<const QStringRef&, QChar>(ns);
  // bool operator==(QChar, QLatin1String);
  gonk::bind::op_eq<QChar, QLatin1String>(ns);
  // bool operator<(QChar, QLatin1String);
  gonk::bind::op_less<QChar, QLatin1String>(ns);
  // bool operator>(QChar, QLatin1String);
  gonk::bind::op_greater<QChar, QLatin1String>(ns);
  // bool operator!=(QChar, QLatin1String);
  gonk::bind::op_neq<QChar, QLatin1String>(ns);
  // bool operator<=(QChar, QLatin1String);
  gonk::bind::op_leq<QChar, QLatin1String>(ns);
  // bool operator>=(QChar, QLatin1String);
  gonk::bind::op_geq<QChar, QLatin1String>(ns);
  // bool operator==(QLatin1String, QChar);
  gonk::bind::op_eq<QLatin1String, QChar>(ns);
  // bool operator!=(QLatin1String, QChar);
  gonk::bind::op_neq<QLatin1String, QChar>(ns);
  // bool operator<(QLatin1String, QChar);
  gonk::bind::op_less<QLatin1String, QChar>(ns);
  // bool operator>(QLatin1String, QChar);
  gonk::bind::op_greater<QLatin1String, QChar>(ns);
  // bool operator<=(QLatin1String, QChar);
  gonk::bind::op_leq<QLatin1String, QChar>(ns);
  // bool operator>=(QLatin1String, QChar);
  gonk::bind::op_geq<QLatin1String, QChar>(ns);
  // bool operator==(QStringView, QStringView);
  /// TODO: bool operator==(QStringView, QStringView);
  // bool operator!=(QStringView, QStringView);
  /// TODO: bool operator!=(QStringView, QStringView);
  // bool operator<(QStringView, QStringView);
  /// TODO: bool operator<(QStringView, QStringView);
  // bool operator<=(QStringView, QStringView);
  /// TODO: bool operator<=(QStringView, QStringView);
  // bool operator>(QStringView, QStringView);
  /// TODO: bool operator>(QStringView, QStringView);
  // bool operator>=(QStringView, QStringView);
  /// TODO: bool operator>=(QStringView, QStringView);
  // bool operator==(QStringView, QChar);
  /// TODO: bool operator==(QStringView, QChar);
  // bool operator!=(QStringView, QChar);
  /// TODO: bool operator!=(QStringView, QChar);
  // bool operator<(QStringView, QChar);
  /// TODO: bool operator<(QStringView, QChar);
  // bool operator<=(QStringView, QChar);
  /// TODO: bool operator<=(QStringView, QChar);
  // bool operator>(QStringView, QChar);
  /// TODO: bool operator>(QStringView, QChar);
  // bool operator>=(QStringView, QChar);
  /// TODO: bool operator>=(QStringView, QChar);
  // bool operator==(QChar, QStringView);
  /// TODO: bool operator==(QChar, QStringView);
  // bool operator!=(QChar, QStringView);
  /// TODO: bool operator!=(QChar, QStringView);
  // bool operator<(QChar, QStringView);
  /// TODO: bool operator<(QChar, QStringView);
  // bool operator<=(QChar, QStringView);
  /// TODO: bool operator<=(QChar, QStringView);
  // bool operator>(QChar, QStringView);
  /// TODO: bool operator>(QChar, QStringView);
  // bool operator>=(QChar, QStringView);
  /// TODO: bool operator>=(QChar, QStringView);
  // bool operator==(QStringView, QLatin1String);
  /// TODO: bool operator==(QStringView, QLatin1String);
  // bool operator!=(QStringView, QLatin1String);
  /// TODO: bool operator!=(QStringView, QLatin1String);
  // bool operator<(QStringView, QLatin1String);
  /// TODO: bool operator<(QStringView, QLatin1String);
  // bool operator<=(QStringView, QLatin1String);
  /// TODO: bool operator<=(QStringView, QLatin1String);
  // bool operator>(QStringView, QLatin1String);
  /// TODO: bool operator>(QStringView, QLatin1String);
  // bool operator>=(QStringView, QLatin1String);
  /// TODO: bool operator>=(QStringView, QLatin1String);
  // bool operator==(QLatin1String, QStringView);
  /// TODO: bool operator==(QLatin1String, QStringView);
  // bool operator!=(QLatin1String, QStringView);
  /// TODO: bool operator!=(QLatin1String, QStringView);
  // bool operator<(QLatin1String, QStringView);
  /// TODO: bool operator<(QLatin1String, QStringView);
  // bool operator<=(QLatin1String, QStringView);
  /// TODO: bool operator<=(QLatin1String, QStringView);
  // bool operator>(QLatin1String, QStringView);
  /// TODO: bool operator>(QLatin1String, QStringView);
  // bool operator>=(QLatin1String, QStringView);
  /// TODO: bool operator>=(QLatin1String, QStringView);
  // bool operator==(const QStringRef&, const QByteArray&);
  gonk::bind::op_eq<const QStringRef&, const QByteArray&>(ns);
  // bool operator!=(const QStringRef&, const QByteArray&);
  gonk::bind::op_neq<const QStringRef&, const QByteArray&>(ns);
  // bool operator<(const QStringRef&, const QByteArray&);
  gonk::bind::op_less<const QStringRef&, const QByteArray&>(ns);
  // bool operator>(const QStringRef&, const QByteArray&);
  gonk::bind::op_greater<const QStringRef&, const QByteArray&>(ns);
  // bool operator<=(const QStringRef&, const QByteArray&);
  gonk::bind::op_leq<const QStringRef&, const QByteArray&>(ns);
  // bool operator>=(const QStringRef&, const QByteArray&);
  gonk::bind::op_geq<const QStringRef&, const QByteArray&>(ns);
  // bool operator==(const QByteArray&, const QStringRef&);
  gonk::bind::op_eq<const QByteArray&, const QStringRef&>(ns);
  // bool operator!=(const QByteArray&, const QStringRef&);
  gonk::bind::op_neq<const QByteArray&, const QStringRef&>(ns);
  // bool operator<(const QByteArray&, const QStringRef&);
  gonk::bind::op_less<const QByteArray&, const QStringRef&>(ns);
  // bool operator>(const QByteArray&, const QStringRef&);
  gonk::bind::op_greater<const QByteArray&, const QStringRef&>(ns);
  // bool operator<=(const QByteArray&, const QStringRef&);
  gonk::bind::op_leq<const QByteArray&, const QStringRef&>(ns);
  // bool operator>=(const QByteArray&, const QStringRef&);
  gonk::bind::op_geq<const QByteArray&, const QStringRef&>(ns);
  // bool operator==(const char*, const QStringRef&);
  /// TODO: bool operator==(const char*, const QStringRef&);
  // bool operator!=(const char*, const QStringRef&);
  /// TODO: bool operator!=(const char*, const QStringRef&);
  // bool operator<(const char*, const QStringRef&);
  /// TODO: bool operator<(const char*, const QStringRef&);
  // bool operator<=(const char*, const QStringRef&);
  /// TODO: bool operator<=(const char*, const QStringRef&);
  // bool operator>(const char*, const QStringRef&);
  /// TODO: bool operator>(const char*, const QStringRef&);
  // bool operator>=(const char*, const QStringRef&);
  /// TODO: bool operator>=(const char*, const QStringRef&);
  // QString operator+(const QString&, const QStringRef&);
  gonk::bind::op_add<QString, const QString&, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, const QString&);
  gonk::bind::op_add<QString, const QStringRef&, const QString&>(ns);
  // QString operator+(const QStringRef&, QLatin1String);
  gonk::bind::op_add<QString, const QStringRef&, QLatin1String>(ns);
  // QString operator+(QLatin1String, const QStringRef&);
  gonk::bind::op_add<QString, QLatin1String, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, const QStringRef&);
  gonk::bind::op_add<QString, const QStringRef&, const QStringRef&>(ns);
  // QString operator+(const QStringRef&, QChar);
  gonk::bind::op_add<QString, const QStringRef&, QChar>(ns);
  // QString operator+(QChar, const QStringRef&);
  gonk::bind::op_add<QString, QChar, const QStringRef&>(ns);
}
